
last_smart_home3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  00003896  0000392a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001f4  008001f4  00003abe  2**0
                  ALLOC
  3 .stab         00003348  00000000  00000000  00003ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010a0  00000000  00000000  00006e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00007ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  0000827c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  0000a88e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000bd5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d068  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000d248  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000d54f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000df69  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e9       	ldi	r30, 0x96	; 150
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3f       	cpi	r26, 0xF8	; 248
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 14 	call	0x2920	; 0x2920 <main>
      8a:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ed       	ldi	r26, 0xD7	; 215
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ed       	ldi	r24, 0xD7	; 215
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	67 ed       	ldi	r22, 0xD7	; 215
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 1e 1c 	jmp	0x383c	; 0x383c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3a 1c 	jmp	0x3874	; 0x3874 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 3e 1c 	jmp	0x387c	; 0x387c <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 1a 1c 	jmp	0x3834	; 0x3834 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 36 1c 	jmp	0x386c	; 0x386c <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	e1 52       	subi	r30, 0x21	; 33
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <EEPROM_write>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "EEPROM_private.h"

void EEPROM_write(u16 address, u8 data )
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	00 d0       	rcall	.+0      	; 0xef0 <EEPROM_write+0x6>
     ef0:	0f 92       	push	r0
     ef2:	cd b7       	in	r28, 0x3d	; 61
     ef4:	de b7       	in	r29, 0x3e	; 62
     ef6:	9a 83       	std	Y+2, r25	; 0x02
     ef8:	89 83       	std	Y+1, r24	; 0x01
     efa:	6b 83       	std	Y+3, r22	; 0x03
	while(GET_BIT(EECR,EEWE) == 1);
     efc:	ec e3       	ldi	r30, 0x3C	; 60
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	86 95       	lsr	r24
     f04:	88 2f       	mov	r24, r24
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	81 70       	andi	r24, 0x01	; 1
     f0a:	90 70       	andi	r25, 0x00	; 0
     f0c:	88 23       	and	r24, r24
     f0e:	b1 f7       	brne	.-20     	; 0xefc <EEPROM_write+0x12>
	while(GET_BIT(SPMCR,SPMEN) == 1);
     f10:	e7 e5       	ldi	r30, 0x57	; 87
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 2f       	mov	r24, r24
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	81 70       	andi	r24, 0x01	; 1
     f1c:	90 70       	andi	r25, 0x00	; 0
     f1e:	88 23       	and	r24, r24
     f20:	b9 f7       	brne	.-18     	; 0xf10 <EEPROM_write+0x26>

	/*set up address register*/
	EEARL = (char)address;
     f22:	ee e3       	ldi	r30, 0x3E	; 62
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	80 83       	st	Z, r24
	EEARH = (char)(address>>8);
     f2a:	ef e3       	ldi	r30, 0x3F	; 63
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	9a 81       	ldd	r25, Y+2	; 0x02
     f32:	89 2f       	mov	r24, r25
     f34:	99 27       	eor	r25, r25
     f36:	80 83       	st	Z, r24
	/*set up data register*/
	EEDR = data ;
     f38:	ed e3       	ldi	r30, 0x3D	; 61
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	8b 81       	ldd	r24, Y+3	; 0x03
     f3e:	80 83       	st	Z, r24
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
     f40:	ac e3       	ldi	r26, 0x3C	; 60
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	ec e3       	ldi	r30, 0x3C	; 60
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	84 60       	ori	r24, 0x04	; 4
     f4c:	8c 93       	st	X, r24
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
     f4e:	ac e3       	ldi	r26, 0x3C	; 60
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	ec e3       	ldi	r30, 0x3C	; 60
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	82 60       	ori	r24, 0x02	; 2
     f5a:	8c 93       	st	X, r24
	/* wait for completion of  write operation*/
	while(GET_BIT(EECR,EEWE) == 1);
     f5c:	ec e3       	ldi	r30, 0x3C	; 60
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	86 95       	lsr	r24
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	81 70       	andi	r24, 0x01	; 1
     f6a:	90 70       	andi	r25, 0x00	; 0
     f6c:	88 23       	and	r24, r24
     f6e:	b1 f7       	brne	.-20     	; 0xf5c <EEPROM_write+0x72>
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	0f 90       	pop	r0
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <EEPROM_read>:
u8 EEPROM_read( u16 address )
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <EEPROM_read+0x6>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	89 83       	std	Y+1, r24	; 0x01
	/*set up address register*/
	EEARL = (char)address;
     f8a:	ee e3       	ldi	r30, 0x3E	; 62
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	80 83       	st	Z, r24
	EEARH = (char)(address>>8);
     f92:	ef e3       	ldi	r30, 0x3F	; 63
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	89 81       	ldd	r24, Y+1	; 0x01
     f98:	9a 81       	ldd	r25, Y+2	; 0x02
     f9a:	89 2f       	mov	r24, r25
     f9c:	99 27       	eor	r25, r25
     f9e:	80 83       	st	Z, r24
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
     fa0:	ac e3       	ldi	r26, 0x3C	; 60
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	ec e3       	ldi	r30, 0x3C	; 60
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	8c 93       	st	X, r24
	/*return data from data register*/
	return EEDR ;
     fae:	ed e3       	ldi	r30, 0x3D	; 61
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <M_Dio_void_setPinDir>:
#include "../../MCAL/DIO/Dio_int.h"
#include "../../MCAL/DIO/Dio_priv.h"


void M_Dio_void_setPinDir(u8 port,u8 pin,u8 dir )
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	2d 97       	sbiw	r28, 0x0d	; 13
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	89 83       	std	Y+1, r24	; 0x01
     fd4:	6a 83       	std	Y+2, r22	; 0x02
     fd6:	4b 83       	std	Y+3, r20	; 0x03
  switch (port)
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	3d 87       	std	Y+13, r19	; 0x0d
     fe0:	2c 87       	std	Y+12, r18	; 0x0c
     fe2:	8c 85       	ldd	r24, Y+12	; 0x0c
     fe4:	9d 85       	ldd	r25, Y+13	; 0x0d
     fe6:	82 30       	cpi	r24, 0x02	; 2
     fe8:	91 05       	cpc	r25, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <M_Dio_void_setPinDir+0x30>
     fec:	50 c0       	rjmp	.+160    	; 0x108e <M_Dio_void_setPinDir+0xd0>
     fee:	2c 85       	ldd	r18, Y+12	; 0x0c
     ff0:	3d 85       	ldd	r19, Y+13	; 0x0d
     ff2:	23 30       	cpi	r18, 0x03	; 3
     ff4:	31 05       	cpc	r19, r1
     ff6:	34 f4       	brge	.+12     	; 0x1004 <M_Dio_void_setPinDir+0x46>
     ff8:	8c 85       	ldd	r24, Y+12	; 0x0c
     ffa:	9d 85       	ldd	r25, Y+13	; 0x0d
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	91 05       	cpc	r25, r1
    1000:	71 f0       	breq	.+28     	; 0x101e <M_Dio_void_setPinDir+0x60>
    1002:	ec c0       	rjmp	.+472    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
    1004:	2c 85       	ldd	r18, Y+12	; 0x0c
    1006:	3d 85       	ldd	r19, Y+13	; 0x0d
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <M_Dio_void_setPinDir+0x52>
    100e:	77 c0       	rjmp	.+238    	; 0x10fe <M_Dio_void_setPinDir+0x140>
    1010:	8c 85       	ldd	r24, Y+12	; 0x0c
    1012:	9d 85       	ldd	r25, Y+13	; 0x0d
    1014:	84 30       	cpi	r24, 0x04	; 4
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <M_Dio_void_setPinDir+0x5e>
    101a:	a9 c0       	rjmp	.+338    	; 0x116e <M_Dio_void_setPinDir+0x1b0>
    101c:	df c0       	rjmp	.+446    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
  {
  case PORTA_ID:
	  switch(dir)
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	3b 87       	std	Y+11, r19	; 0x0b
    1026:	2a 87       	std	Y+10, r18	; 0x0a
    1028:	8a 85       	ldd	r24, Y+10	; 0x0a
    102a:	9b 85       	ldd	r25, Y+11	; 0x0b
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	31 f0       	breq	.+12     	; 0x103c <M_Dio_void_setPinDir+0x7e>
    1030:	2a 85       	ldd	r18, Y+10	; 0x0a
    1032:	3b 85       	ldd	r19, Y+11	; 0x0b
    1034:	21 30       	cpi	r18, 0x01	; 1
    1036:	31 05       	cpc	r19, r1
    1038:	b1 f0       	breq	.+44     	; 0x1066 <M_Dio_void_setPinDir+0xa8>
    103a:	d0 c0       	rjmp	.+416    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  {
	  case  INPUT:
		  CLR_BIT(DDRA_REG,pin);
    103c:	aa e3       	ldi	r26, 0x3A	; 58
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ea e3       	ldi	r30, 0x3A	; 58
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	8a 81       	ldd	r24, Y+2	; 0x02
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	02 2e       	mov	r0, r18
    1054:	02 c0       	rjmp	.+4      	; 0x105a <M_Dio_void_setPinDir+0x9c>
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	0a 94       	dec	r0
    105c:	e2 f7       	brpl	.-8      	; 0x1056 <M_Dio_void_setPinDir+0x98>
    105e:	80 95       	com	r24
    1060:	84 23       	and	r24, r20
    1062:	8c 93       	st	X, r24
    1064:	bb c0       	rjmp	.+374    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
		  break;
	  case  OUPUT:
		  SET_BIT(DDRA_REG,pin);
    1066:	aa e3       	ldi	r26, 0x3A	; 58
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	ea e3       	ldi	r30, 0x3A	; 58
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	48 2f       	mov	r20, r24
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 2e       	mov	r0, r18
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <M_Dio_void_setPinDir+0xc6>
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	0a 94       	dec	r0
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <M_Dio_void_setPinDir+0xc2>
    1088:	84 2b       	or	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	a7 c0       	rjmp	.+334    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
		  break;

	  }
	  break;
  case PORTB_ID:
	  switch(dir)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	39 87       	std	Y+9, r19	; 0x09
    1096:	28 87       	std	Y+8, r18	; 0x08
    1098:	88 85       	ldd	r24, Y+8	; 0x08
    109a:	99 85       	ldd	r25, Y+9	; 0x09
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	31 f0       	breq	.+12     	; 0x10ac <M_Dio_void_setPinDir+0xee>
    10a0:	28 85       	ldd	r18, Y+8	; 0x08
    10a2:	39 85       	ldd	r19, Y+9	; 0x09
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	b1 f0       	breq	.+44     	; 0x10d6 <M_Dio_void_setPinDir+0x118>
    10aa:	98 c0       	rjmp	.+304    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  	  {
	  	  case  INPUT:
	  		  CLR_BIT(DDRB_REG,pin);
    10ac:	a7 e3       	ldi	r26, 0x37	; 55
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e7 e3       	ldi	r30, 0x37	; 55
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <M_Dio_void_setPinDir+0x10c>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <M_Dio_void_setPinDir+0x108>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	83 c0       	rjmp	.+262    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  		  break;
	  	  case  OUPUT:
	  		  SET_BIT(DDRB_REG,pin);
    10d6:	a7 e3       	ldi	r26, 0x37	; 55
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e7 e3       	ldi	r30, 0x37	; 55
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8a 81       	ldd	r24, Y+2	; 0x02
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <M_Dio_void_setPinDir+0x136>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <M_Dio_void_setPinDir+0x132>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	6f c0       	rjmp	.+222    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  		  break;

	  	  }
 	  break;
  case PORTC_ID:
	  switch(dir)
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3f 83       	std	Y+7, r19	; 0x07
    1106:	2e 83       	std	Y+6, r18	; 0x06
    1108:	8e 81       	ldd	r24, Y+6	; 0x06
    110a:	9f 81       	ldd	r25, Y+7	; 0x07
    110c:	00 97       	sbiw	r24, 0x00	; 0
    110e:	31 f0       	breq	.+12     	; 0x111c <M_Dio_void_setPinDir+0x15e>
    1110:	2e 81       	ldd	r18, Y+6	; 0x06
    1112:	3f 81       	ldd	r19, Y+7	; 0x07
    1114:	21 30       	cpi	r18, 0x01	; 1
    1116:	31 05       	cpc	r19, r1
    1118:	b1 f0       	breq	.+44     	; 0x1146 <M_Dio_void_setPinDir+0x188>
    111a:	60 c0       	rjmp	.+192    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  	  {
	  	  case  INPUT:
	  		  CLR_BIT(DDRC_REG,pin);
    111c:	a4 e3       	ldi	r26, 0x34	; 52
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e4 e3       	ldi	r30, 0x34	; 52
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <M_Dio_void_setPinDir+0x17c>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <M_Dio_void_setPinDir+0x178>
    113e:	80 95       	com	r24
    1140:	84 23       	and	r24, r20
    1142:	8c 93       	st	X, r24
    1144:	4b c0       	rjmp	.+150    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  		  break;
	  	  case  OUPUT:
	  		  SET_BIT(DDRC_REG,pin);
    1146:	a4 e3       	ldi	r26, 0x34	; 52
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e4 e3       	ldi	r30, 0x34	; 52
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	48 2f       	mov	r20, r24
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <M_Dio_void_setPinDir+0x1a6>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <M_Dio_void_setPinDir+0x1a2>
    1168:	84 2b       	or	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	37 c0       	rjmp	.+110    	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  		  break;

	  	  }
 	  break;
  case PORTD_ID:
	  switch(dir)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	3d 83       	std	Y+5, r19	; 0x05
    1176:	2c 83       	std	Y+4, r18	; 0x04
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	31 f0       	breq	.+12     	; 0x118c <M_Dio_void_setPinDir+0x1ce>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	21 30       	cpi	r18, 0x01	; 1
    1186:	31 05       	cpc	r19, r1
    1188:	b1 f0       	breq	.+44     	; 0x11b6 <M_Dio_void_setPinDir+0x1f8>
    118a:	28 c0       	rjmp	.+80     	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  	  {
	  	  case  INPUT:
	  		  CLR_BIT(DDRD_REG,pin);
    118c:	a1 e3       	ldi	r26, 0x31	; 49
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <M_Dio_void_setPinDir+0x1ec>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <M_Dio_void_setPinDir+0x1e8>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	13 c0       	rjmp	.+38     	; 0x11dc <M_Dio_void_setPinDir+0x21e>
	  		  break;
	  	  case  OUPUT:
	  		  SET_BIT(DDRD_REG,pin);
    11b6:	a1 e3       	ldi	r26, 0x31	; 49
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	e1 e3       	ldi	r30, 0x31	; 49
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	48 2f       	mov	r20, r24
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	02 2e       	mov	r0, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <M_Dio_void_setPinDir+0x216>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <M_Dio_void_setPinDir+0x212>
    11d8:	84 2b       	or	r24, r20
    11da:	8c 93       	st	X, r24
	  	  }
 	  break;
  }


}
    11dc:	2d 96       	adiw	r28, 0x0d	; 13
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	f8 94       	cli
    11e2:	de bf       	out	0x3e, r29	; 62
    11e4:	0f be       	out	0x3f, r0	; 63
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <M_Dio_void_setPinValue>:
void M_Dio_void_setPinValue(u8 port,u8 pin,u8 value)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	2d 97       	sbiw	r28, 0x0d	; 13
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	6a 83       	std	Y+2, r22	; 0x02
    1206:	4b 83       	std	Y+3, r20	; 0x03
	// this function used to set output
 // I will Access PORT register
	// according to value (high , low) -->(SET_BIT ,CLR_BIT )
	switch(port)
    1208:	89 81       	ldd	r24, Y+1	; 0x01
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	3d 87       	std	Y+13, r19	; 0x0d
    1210:	2c 87       	std	Y+12, r18	; 0x0c
    1212:	8c 85       	ldd	r24, Y+12	; 0x0c
    1214:	9d 85       	ldd	r25, Y+13	; 0x0d
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	91 05       	cpc	r25, r1
    121a:	09 f4       	brne	.+2      	; 0x121e <M_Dio_void_setPinValue+0x30>
    121c:	50 c0       	rjmp	.+160    	; 0x12be <M_Dio_void_setPinValue+0xd0>
    121e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1220:	3d 85       	ldd	r19, Y+13	; 0x0d
    1222:	23 30       	cpi	r18, 0x03	; 3
    1224:	31 05       	cpc	r19, r1
    1226:	34 f4       	brge	.+12     	; 0x1234 <M_Dio_void_setPinValue+0x46>
    1228:	8c 85       	ldd	r24, Y+12	; 0x0c
    122a:	9d 85       	ldd	r25, Y+13	; 0x0d
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	91 05       	cpc	r25, r1
    1230:	71 f0       	breq	.+28     	; 0x124e <M_Dio_void_setPinValue+0x60>
    1232:	eb c0       	rjmp	.+470    	; 0x140a <M_Dio_void_setPinValue+0x21c>
    1234:	2c 85       	ldd	r18, Y+12	; 0x0c
    1236:	3d 85       	ldd	r19, Y+13	; 0x0d
    1238:	23 30       	cpi	r18, 0x03	; 3
    123a:	31 05       	cpc	r19, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <M_Dio_void_setPinValue+0x52>
    123e:	77 c0       	rjmp	.+238    	; 0x132e <M_Dio_void_setPinValue+0x140>
    1240:	8c 85       	ldd	r24, Y+12	; 0x0c
    1242:	9d 85       	ldd	r25, Y+13	; 0x0d
    1244:	84 30       	cpi	r24, 0x04	; 4
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <M_Dio_void_setPinValue+0x5e>
    124a:	a9 c0       	rjmp	.+338    	; 0x139e <M_Dio_void_setPinValue+0x1b0>
    124c:	de c0       	rjmp	.+444    	; 0x140a <M_Dio_void_setPinValue+0x21c>
	{
	case PORTA_ID:
		switch(value)
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	3b 87       	std	Y+11, r19	; 0x0b
    1256:	2a 87       	std	Y+10, r18	; 0x0a
    1258:	8a 85       	ldd	r24, Y+10	; 0x0a
    125a:	9b 85       	ldd	r25, Y+11	; 0x0b
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	d1 f0       	breq	.+52     	; 0x1294 <M_Dio_void_setPinValue+0xa6>
    1260:	2a 85       	ldd	r18, Y+10	; 0x0a
    1262:	3b 85       	ldd	r19, Y+11	; 0x0b
    1264:	21 30       	cpi	r18, 0x01	; 1
    1266:	31 05       	cpc	r19, r1
    1268:	09 f0       	breq	.+2      	; 0x126c <M_Dio_void_setPinValue+0x7e>
    126a:	cf c0       	rjmp	.+414    	; 0x140a <M_Dio_void_setPinValue+0x21c>
		{
		case HIGH:
			SET_BIT(PORTA_REG,pin);
    126c:	ab e3       	ldi	r26, 0x3B	; 59
    126e:	b0 e0       	ldi	r27, 0x00	; 0
    1270:	eb e3       	ldi	r30, 0x3B	; 59
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	48 2f       	mov	r20, r24
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 2e       	mov	r0, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <M_Dio_void_setPinValue+0x9c>
    1286:	88 0f       	add	r24, r24
    1288:	99 1f       	adc	r25, r25
    128a:	0a 94       	dec	r0
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <M_Dio_void_setPinValue+0x98>
    128e:	84 2b       	or	r24, r20
    1290:	8c 93       	st	X, r24
    1292:	bb c0       	rjmp	.+374    	; 0x140a <M_Dio_void_setPinValue+0x21c>
			break;
		case LOW:
			CLR_BIT(PORTA_REG,pin);
    1294:	ab e3       	ldi	r26, 0x3B	; 59
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	eb e3       	ldi	r30, 0x3B	; 59
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	48 2f       	mov	r20, r24
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 2e       	mov	r0, r18
    12ac:	02 c0       	rjmp	.+4      	; 0x12b2 <M_Dio_void_setPinValue+0xc4>
    12ae:	88 0f       	add	r24, r24
    12b0:	99 1f       	adc	r25, r25
    12b2:	0a 94       	dec	r0
    12b4:	e2 f7       	brpl	.-8      	; 0x12ae <M_Dio_void_setPinValue+0xc0>
    12b6:	80 95       	com	r24
    12b8:	84 23       	and	r24, r20
    12ba:	8c 93       	st	X, r24
    12bc:	a6 c0       	rjmp	.+332    	; 0x140a <M_Dio_void_setPinValue+0x21c>
			break;
		}
		break;
	case PORTB_ID:
		switch(value)
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	39 87       	std	Y+9, r19	; 0x09
    12c6:	28 87       	std	Y+8, r18	; 0x08
    12c8:	88 85       	ldd	r24, Y+8	; 0x08
    12ca:	99 85       	ldd	r25, Y+9	; 0x09
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	d1 f0       	breq	.+52     	; 0x1304 <M_Dio_void_setPinValue+0x116>
    12d0:	28 85       	ldd	r18, Y+8	; 0x08
    12d2:	39 85       	ldd	r19, Y+9	; 0x09
    12d4:	21 30       	cpi	r18, 0x01	; 1
    12d6:	31 05       	cpc	r19, r1
    12d8:	09 f0       	breq	.+2      	; 0x12dc <M_Dio_void_setPinValue+0xee>
    12da:	97 c0       	rjmp	.+302    	; 0x140a <M_Dio_void_setPinValue+0x21c>
		{
		case HIGH:
			SET_BIT(PORTB_REG,pin);
    12dc:	a8 e3       	ldi	r26, 0x38	; 56
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	e8 e3       	ldi	r30, 0x38	; 56
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	48 2f       	mov	r20, r24
    12e8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ea:	28 2f       	mov	r18, r24
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 2e       	mov	r0, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <M_Dio_void_setPinValue+0x10c>
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	0a 94       	dec	r0
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <M_Dio_void_setPinValue+0x108>
    12fe:	84 2b       	or	r24, r20
    1300:	8c 93       	st	X, r24
    1302:	83 c0       	rjmp	.+262    	; 0x140a <M_Dio_void_setPinValue+0x21c>
			break;
		case LOW:
			CLR_BIT(PORTB_REG,pin);
    1304:	a8 e3       	ldi	r26, 0x38	; 56
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	e8 e3       	ldi	r30, 0x38	; 56
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	48 2f       	mov	r20, r24
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 2e       	mov	r0, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <M_Dio_void_setPinValue+0x134>
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	0a 94       	dec	r0
    1324:	e2 f7       	brpl	.-8      	; 0x131e <M_Dio_void_setPinValue+0x130>
    1326:	80 95       	com	r24
    1328:	84 23       	and	r24, r20
    132a:	8c 93       	st	X, r24
    132c:	6e c0       	rjmp	.+220    	; 0x140a <M_Dio_void_setPinValue+0x21c>
			break;
		}
			break;
	case PORTC_ID:
		switch(value)
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	3f 83       	std	Y+7, r19	; 0x07
    1336:	2e 83       	std	Y+6, r18	; 0x06
    1338:	8e 81       	ldd	r24, Y+6	; 0x06
    133a:	9f 81       	ldd	r25, Y+7	; 0x07
    133c:	00 97       	sbiw	r24, 0x00	; 0
    133e:	d1 f0       	breq	.+52     	; 0x1374 <M_Dio_void_setPinValue+0x186>
    1340:	2e 81       	ldd	r18, Y+6	; 0x06
    1342:	3f 81       	ldd	r19, Y+7	; 0x07
    1344:	21 30       	cpi	r18, 0x01	; 1
    1346:	31 05       	cpc	r19, r1
    1348:	09 f0       	breq	.+2      	; 0x134c <M_Dio_void_setPinValue+0x15e>
    134a:	5f c0       	rjmp	.+190    	; 0x140a <M_Dio_void_setPinValue+0x21c>
		{
		case HIGH:
			SET_BIT(PORTC_REG,pin);
    134c:	a5 e3       	ldi	r26, 0x35	; 53
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e5 e3       	ldi	r30, 0x35	; 53
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	48 2f       	mov	r20, r24
    1358:	8a 81       	ldd	r24, Y+2	; 0x02
    135a:	28 2f       	mov	r18, r24
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	02 2e       	mov	r0, r18
    1364:	02 c0       	rjmp	.+4      	; 0x136a <M_Dio_void_setPinValue+0x17c>
    1366:	88 0f       	add	r24, r24
    1368:	99 1f       	adc	r25, r25
    136a:	0a 94       	dec	r0
    136c:	e2 f7       	brpl	.-8      	; 0x1366 <M_Dio_void_setPinValue+0x178>
    136e:	84 2b       	or	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	4b c0       	rjmp	.+150    	; 0x140a <M_Dio_void_setPinValue+0x21c>
			break;
		case LOW:
			CLR_BIT(PORTC_REG,pin);
    1374:	a5 e3       	ldi	r26, 0x35	; 53
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	e5 e3       	ldi	r30, 0x35	; 53
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	48 2f       	mov	r20, r24
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	02 2e       	mov	r0, r18
    138c:	02 c0       	rjmp	.+4      	; 0x1392 <M_Dio_void_setPinValue+0x1a4>
    138e:	88 0f       	add	r24, r24
    1390:	99 1f       	adc	r25, r25
    1392:	0a 94       	dec	r0
    1394:	e2 f7       	brpl	.-8      	; 0x138e <M_Dio_void_setPinValue+0x1a0>
    1396:	80 95       	com	r24
    1398:	84 23       	and	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	36 c0       	rjmp	.+108    	; 0x140a <M_Dio_void_setPinValue+0x21c>
			break;
		}
			break;
	case PORTD_ID:
		switch(value)
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	3d 83       	std	Y+5, r19	; 0x05
    13a6:	2c 83       	std	Y+4, r18	; 0x04
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	c9 f0       	breq	.+50     	; 0x13e2 <M_Dio_void_setPinValue+0x1f4>
    13b0:	2c 81       	ldd	r18, Y+4	; 0x04
    13b2:	3d 81       	ldd	r19, Y+5	; 0x05
    13b4:	21 30       	cpi	r18, 0x01	; 1
    13b6:	31 05       	cpc	r19, r1
    13b8:	41 f5       	brne	.+80     	; 0x140a <M_Dio_void_setPinValue+0x21c>
		{
		case HIGH:
			SET_BIT(PORTD_REG,pin);
    13ba:	a2 e3       	ldi	r26, 0x32	; 50
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e2 e3       	ldi	r30, 0x32	; 50
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	48 2f       	mov	r20, r24
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	02 2e       	mov	r0, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <M_Dio_void_setPinValue+0x1ea>
    13d4:	88 0f       	add	r24, r24
    13d6:	99 1f       	adc	r25, r25
    13d8:	0a 94       	dec	r0
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <M_Dio_void_setPinValue+0x1e6>
    13dc:	84 2b       	or	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	14 c0       	rjmp	.+40     	; 0x140a <M_Dio_void_setPinValue+0x21c>
			break;
		case LOW:
			CLR_BIT(PORTD_REG,pin);
    13e2:	a2 e3       	ldi	r26, 0x32	; 50
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e2 e3       	ldi	r30, 0x32	; 50
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <M_Dio_void_setPinValue+0x212>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <M_Dio_void_setPinValue+0x20e>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
			break;
		}
			break;
	}
}
    140a:	2d 96       	adiw	r28, 0x0d	; 13
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	de bf       	out	0x3e, r29	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	cd bf       	out	0x3d, r28	; 61
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <M_Dio_void_getPinValue>:
void M_Dio_void_getPinValue(u8 port,u8 pin, u8* pvalue)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <M_Dio_void_getPinValue+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <M_Dio_void_getPinValue+0x8>
    1424:	00 d0       	rcall	.+0      	; 0x1426 <M_Dio_void_getPinValue+0xa>
    1426:	cd b7       	in	r28, 0x3d	; 61
    1428:	de b7       	in	r29, 0x3e	; 62
    142a:	89 83       	std	Y+1, r24	; 0x01
    142c:	6a 83       	std	Y+2, r22	; 0x02
    142e:	5c 83       	std	Y+4, r21	; 0x04
    1430:	4b 83       	std	Y+3, r20	; 0x03
	// this function used to get input
	// I will Access PIN register
	// return (high, low)
	// GET_BIT
	switch(port)
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3e 83       	std	Y+6, r19	; 0x06
    143a:	2d 83       	std	Y+5, r18	; 0x05
    143c:	4d 81       	ldd	r20, Y+5	; 0x05
    143e:	5e 81       	ldd	r21, Y+6	; 0x06
    1440:	42 30       	cpi	r20, 0x02	; 2
    1442:	51 05       	cpc	r21, r1
    1444:	59 f1       	breq	.+86     	; 0x149c <M_Dio_void_getPinValue+0x80>
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	9e 81       	ldd	r25, Y+6	; 0x06
    144a:	83 30       	cpi	r24, 0x03	; 3
    144c:	91 05       	cpc	r25, r1
    144e:	34 f4       	brge	.+12     	; 0x145c <M_Dio_void_getPinValue+0x40>
    1450:	2d 81       	ldd	r18, Y+5	; 0x05
    1452:	3e 81       	ldd	r19, Y+6	; 0x06
    1454:	21 30       	cpi	r18, 0x01	; 1
    1456:	31 05       	cpc	r19, r1
    1458:	69 f0       	breq	.+26     	; 0x1474 <M_Dio_void_getPinValue+0x58>
    145a:	5b c0       	rjmp	.+182    	; 0x1512 <M_Dio_void_getPinValue+0xf6>
    145c:	4d 81       	ldd	r20, Y+5	; 0x05
    145e:	5e 81       	ldd	r21, Y+6	; 0x06
    1460:	43 30       	cpi	r20, 0x03	; 3
    1462:	51 05       	cpc	r21, r1
    1464:	79 f1       	breq	.+94     	; 0x14c4 <M_Dio_void_getPinValue+0xa8>
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	84 30       	cpi	r24, 0x04	; 4
    146c:	91 05       	cpc	r25, r1
    146e:	09 f4       	brne	.+2      	; 0x1472 <M_Dio_void_getPinValue+0x56>
    1470:	3d c0       	rjmp	.+122    	; 0x14ec <M_Dio_void_getPinValue+0xd0>
    1472:	4f c0       	rjmp	.+158    	; 0x1512 <M_Dio_void_getPinValue+0xf6>
		{
		case PORTA_ID:
			*pvalue = GET_BIT(PINA_REG,pin);
    1474:	e9 e3       	ldi	r30, 0x39	; 57
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	88 2f       	mov	r24, r24
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	a9 01       	movw	r20, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <M_Dio_void_getPinValue+0x70>
    1488:	55 95       	asr	r21
    148a:	47 95       	ror	r20
    148c:	8a 95       	dec	r24
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <M_Dio_void_getPinValue+0x6c>
    1490:	ca 01       	movw	r24, r20
    1492:	81 70       	andi	r24, 0x01	; 1
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	80 83       	st	Z, r24
    149a:	3b c0       	rjmp	.+118    	; 0x1512 <M_Dio_void_getPinValue+0xf6>
			break;
		case PORTB_ID:
			*pvalue = GET_BIT(PINB_REG,pin);
    149c:	e6 e3       	ldi	r30, 0x36	; 54
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a9 01       	movw	r20, r18
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <M_Dio_void_getPinValue+0x98>
    14b0:	55 95       	asr	r21
    14b2:	47 95       	ror	r20
    14b4:	8a 95       	dec	r24
    14b6:	e2 f7       	brpl	.-8      	; 0x14b0 <M_Dio_void_getPinValue+0x94>
    14b8:	ca 01       	movw	r24, r20
    14ba:	81 70       	andi	r24, 0x01	; 1
    14bc:	eb 81       	ldd	r30, Y+3	; 0x03
    14be:	fc 81       	ldd	r31, Y+4	; 0x04
    14c0:	80 83       	st	Z, r24
    14c2:	27 c0       	rjmp	.+78     	; 0x1512 <M_Dio_void_getPinValue+0xf6>
				break;
		case PORTC_ID:
			*pvalue = GET_BIT(PINC_REG,pin);
    14c4:	e3 e3       	ldi	r30, 0x33	; 51
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	a9 01       	movw	r20, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <M_Dio_void_getPinValue+0xc0>
    14d8:	55 95       	asr	r21
    14da:	47 95       	ror	r20
    14dc:	8a 95       	dec	r24
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <M_Dio_void_getPinValue+0xbc>
    14e0:	ca 01       	movw	r24, r20
    14e2:	81 70       	andi	r24, 0x01	; 1
    14e4:	eb 81       	ldd	r30, Y+3	; 0x03
    14e6:	fc 81       	ldd	r31, Y+4	; 0x04
    14e8:	80 83       	st	Z, r24
    14ea:	13 c0       	rjmp	.+38     	; 0x1512 <M_Dio_void_getPinValue+0xf6>
				break;
		case PORTD_ID:
			*pvalue = GET_BIT(PIND_REG,pin);
    14ec:	e0 e3       	ldi	r30, 0x30	; 48
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <M_Dio_void_getPinValue+0xe8>
    1500:	55 95       	asr	r21
    1502:	47 95       	ror	r20
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <M_Dio_void_getPinValue+0xe4>
    1508:	ca 01       	movw	r24, r20
    150a:	81 70       	andi	r24, 0x01	; 1
    150c:	eb 81       	ldd	r30, Y+3	; 0x03
    150e:	fc 81       	ldd	r31, Y+4	; 0x04
    1510:	80 83       	st	Z, r24
				break;
		}
}
    1512:	26 96       	adiw	r28, 0x06	; 6
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	cf 91       	pop	r28
    1520:	df 91       	pop	r29
    1522:	08 95       	ret

00001524 <M_Dio_void_TogPinValue>:
void M_Dio_void_TogPinValue(u8 port,u8 pin )
{
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	00 d0       	rcall	.+0      	; 0x152a <M_Dio_void_TogPinValue+0x6>
    152a:	00 d0       	rcall	.+0      	; 0x152c <M_Dio_void_TogPinValue+0x8>
    152c:	cd b7       	in	r28, 0x3d	; 61
    152e:	de b7       	in	r29, 0x3e	; 62
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	6a 83       	std	Y+2, r22	; 0x02
    // TOG_BIT
	switch(port)
    1534:	89 81       	ldd	r24, Y+1	; 0x01
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3c 83       	std	Y+4, r19	; 0x04
    153c:	2b 83       	std	Y+3, r18	; 0x03
    153e:	8b 81       	ldd	r24, Y+3	; 0x03
    1540:	9c 81       	ldd	r25, Y+4	; 0x04
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	51 f1       	breq	.+84     	; 0x159c <M_Dio_void_TogPinValue+0x78>
    1548:	2b 81       	ldd	r18, Y+3	; 0x03
    154a:	3c 81       	ldd	r19, Y+4	; 0x04
    154c:	23 30       	cpi	r18, 0x03	; 3
    154e:	31 05       	cpc	r19, r1
    1550:	34 f4       	brge	.+12     	; 0x155e <M_Dio_void_TogPinValue+0x3a>
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	91 05       	cpc	r25, r1
    155a:	61 f0       	breq	.+24     	; 0x1574 <M_Dio_void_TogPinValue+0x50>
    155c:	5a c0       	rjmp	.+180    	; 0x1612 <M_Dio_void_TogPinValue+0xee>
    155e:	2b 81       	ldd	r18, Y+3	; 0x03
    1560:	3c 81       	ldd	r19, Y+4	; 0x04
    1562:	23 30       	cpi	r18, 0x03	; 3
    1564:	31 05       	cpc	r19, r1
    1566:	71 f1       	breq	.+92     	; 0x15c4 <M_Dio_void_TogPinValue+0xa0>
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	91 05       	cpc	r25, r1
    1570:	e9 f1       	breq	.+122    	; 0x15ec <M_Dio_void_TogPinValue+0xc8>
    1572:	4f c0       	rjmp	.+158    	; 0x1612 <M_Dio_void_TogPinValue+0xee>
	{
	 case PORTA_ID:
		 TOG_BIT(PORTA_REG,pin);
    1574:	ab e3       	ldi	r26, 0x3B	; 59
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	eb e3       	ldi	r30, 0x3B	; 59
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	48 2f       	mov	r20, r24
    1580:	8a 81       	ldd	r24, Y+2	; 0x02
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	02 2e       	mov	r0, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <M_Dio_void_TogPinValue+0x6e>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	0a 94       	dec	r0
    1594:	e2 f7       	brpl	.-8      	; 0x158e <M_Dio_void_TogPinValue+0x6a>
    1596:	84 27       	eor	r24, r20
    1598:	8c 93       	st	X, r24
    159a:	3b c0       	rjmp	.+118    	; 0x1612 <M_Dio_void_TogPinValue+0xee>
		 break;
	 case PORTB_ID:
		 TOG_BIT(PORTB_REG,pin);
    159c:	a8 e3       	ldi	r26, 0x38	; 56
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	e8 e3       	ldi	r30, 0x38	; 56
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <M_Dio_void_TogPinValue+0x96>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <M_Dio_void_TogPinValue+0x92>
    15be:	84 27       	eor	r24, r20
    15c0:	8c 93       	st	X, r24
    15c2:	27 c0       	rjmp	.+78     	; 0x1612 <M_Dio_void_TogPinValue+0xee>
	 		 break;
	 case PORTC_ID:
		 TOG_BIT(PORTC_REG,pin);
    15c4:	a5 e3       	ldi	r26, 0x35	; 53
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e5 e3       	ldi	r30, 0x35	; 53
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <M_Dio_void_TogPinValue+0xbe>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <M_Dio_void_TogPinValue+0xba>
    15e6:	84 27       	eor	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <M_Dio_void_TogPinValue+0xee>
	 		 break;
	 case PORTD_ID:
		 TOG_BIT(PORTA_REG,pin);
    15ec:	ab e3       	ldi	r26, 0x3B	; 59
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	eb e3       	ldi	r30, 0x3B	; 59
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <M_Dio_void_TogPinValue+0xe6>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <M_Dio_void_TogPinValue+0xe2>
    160e:	84 27       	eor	r24, r20
    1610:	8c 93       	st	X, r24
	 		 break;
	}

}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <M_ADC_void_init>:
#include"ADC_pri.h"
#include"ADC_config.h"
#include"ADC_int.h"

void M_ADC_void_init(void)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADMUX_REG,REFS0);
    1628:	a7 e2       	ldi	r26, 0x27	; 39
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e7 e2       	ldi	r30, 0x27	; 39
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	80 64       	ori	r24, 0x40	; 64
    1634:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,	ADEN_BIT);
    1636:	a6 e2       	ldi	r26, 0x26	; 38
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e6 e2       	ldi	r30, 0x26	; 38
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	80 68       	ori	r24, 0x80	; 128
    1642:	8c 93       	st	X, r24

	SET_BIT(ADCSRA_REG,ADPS0);
    1644:	a6 e2       	ldi	r26, 0x26	; 38
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	e6 e2       	ldi	r30, 0x26	; 38
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	81 60       	ori	r24, 0x01	; 1
    1650:	8c 93       	st	X, r24
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <M_ADC_u16_adcRead>:

u16 M_ADC_u16_adcRead(void)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	00 d0       	rcall	.+0      	; 0x165e <M_ADC_u16_adcRead+0x6>
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
	unsigned short int read_val;

	SET_BIT(ADCSRA_REG,ADSC_BIT);
    1662:	a6 e2       	ldi	r26, 0x26	; 38
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	e6 e2       	ldi	r30, 0x26	; 38
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 64       	ori	r24, 0x40	; 64
    166e:	8c 93       	st	X, r24
	while( GET_BIT(ADCSRA_REG,ADIF_BIT) == 0);//stay in your position till ADIF become 1
    1670:	e6 e2       	ldi	r30, 0x26	; 38
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	80 81       	ld	r24, Z
    1676:	82 95       	swap	r24
    1678:	8f 70       	andi	r24, 0x0F	; 15
    167a:	88 2f       	mov	r24, r24
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	81 70       	andi	r24, 0x01	; 1
    1680:	90 70       	andi	r25, 0x00	; 0
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	a9 f3       	breq	.-22     	; 0x1670 <M_ADC_u16_adcRead+0x18>
	SET_BIT(ADCSRA_REG,ADIF_BIT); // clear ADIF
    1686:	a6 e2       	ldi	r26, 0x26	; 38
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e6 e2       	ldi	r30, 0x26	; 38
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	80 61       	ori	r24, 0x10	; 16
    1692:	8c 93       	st	X, r24
	read_val=(ADCL);
    1694:	e4 e2       	ldi	r30, 0x24	; 36
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	80 81       	ld	r24, Z
    169a:	91 81       	ldd	r25, Z+1	; 0x01
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01
	read_val|=(ADCH<<8);
    16a0:	e5 e2       	ldi	r30, 0x25	; 37
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	38 2f       	mov	r19, r24
    16aa:	22 27       	eor	r18, r18
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	9a 81       	ldd	r25, Y+2	; 0x02
    16b0:	82 2b       	or	r24, r18
    16b2:	93 2b       	or	r25, r19
    16b4:	9a 83       	std	Y+2, r25	; 0x02
    16b6:	89 83       	std	Y+1, r24	; 0x01
	return read_val ;
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	9a 81       	ldd	r25, Y+2	; 0x02

}
    16bc:	0f 90       	pop	r0
    16be:	0f 90       	pop	r0
    16c0:	cf 91       	pop	r28
    16c2:	df 91       	pop	r29
    16c4:	08 95       	ret

000016c6 <H_DcMotor_void_init>:
#include "STD_TYPES.h"
#include "Dio_int.h"


void H_DcMotor_void_init(void)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinDir(PORTB_ID ,PIN0_ID ,OUPUT);
    16ce:	82 e0       	ldi	r24, 0x02	; 2
    16d0:	60 e0       	ldi	r22, 0x00	; 0
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <H_DcMotor_void_ON>:
void H_DcMotor_void_ON(void)
{
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(PORTB_ID,PIN0_ID,HIGH);
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
}
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	08 95       	ret

000016f6 <H_DcMotor_void_OF>:
void H_DcMotor_void_OF(void)
{
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
	M_Dio_void_setPinValue(PORTB_ID,PIN0_ID,LOW);
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	40 e0       	ldi	r20, 0x00	; 0
    1704:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
}
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <ultrasonic_vinit>:




void ultrasonic_vinit(u8 triger_port,u8 triger_pin)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <ultrasonic_vinit+0x6>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	6a 83       	std	Y+2, r22	; 0x02
	M_Dio_void_setPinDir(triger_port,triger_pin,OUPUT);
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	6a 81       	ldd	r22, Y+2	; 0x02
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
}
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <ultrasonic_u16distance>:

u16 ultrasonic_u16distance(u8 triger_port,u8 triger_pin)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	a2 97       	sbiw	r28, 0x22	; 34
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	89 a3       	std	Y+33, r24	; 0x21
    1746:	6a a3       	std	Y+34, r22	; 0x22
	u16 a , b , high , distance;
	TCCR1A = 0;
    1748:	ef e4       	ldi	r30, 0x4F	; 79
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	10 82       	st	Z, r1
	//TIFR = (1<<ICF1);
	SET_BIT(TIFR,ICF1);
    174e:	a8 e5       	ldi	r26, 0x58	; 88
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e8 e5       	ldi	r30, 0x58	; 88
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	80 62       	ori	r24, 0x20	; 32
    175a:	8c 93       	st	X, r24
	M_Dio_void_setPinValue(triger_port,triger_pin,HIGH);
    175c:	89 a1       	ldd	r24, Y+33	; 0x21
    175e:	6a a1       	ldd	r22, Y+34	; 0x22
    1760:	41 e0       	ldi	r20, 0x01	; 1
    1762:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	a8 e4       	ldi	r26, 0x48	; 72
    176c:	b2 e4       	ldi	r27, 0x42	; 66
    176e:	8d 8b       	std	Y+21, r24	; 0x15
    1770:	9e 8b       	std	Y+22, r25	; 0x16
    1772:	af 8b       	std	Y+23, r26	; 0x17
    1774:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1776:	6d 89       	ldd	r22, Y+21	; 0x15
    1778:	7e 89       	ldd	r23, Y+22	; 0x16
    177a:	8f 89       	ldd	r24, Y+23	; 0x17
    177c:	98 8d       	ldd	r25, Y+24	; 0x18
    177e:	2b ea       	ldi	r18, 0xAB	; 171
    1780:	3a ea       	ldi	r19, 0xAA	; 170
    1782:	4a ea       	ldi	r20, 0xAA	; 170
    1784:	50 e4       	ldi	r21, 0x40	; 64
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	89 8b       	std	Y+17, r24	; 0x11
    1790:	9a 8b       	std	Y+18, r25	; 0x12
    1792:	ab 8b       	std	Y+19, r26	; 0x13
    1794:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1796:	69 89       	ldd	r22, Y+17	; 0x11
    1798:	7a 89       	ldd	r23, Y+18	; 0x12
    179a:	8b 89       	ldd	r24, Y+19	; 0x13
    179c:	9c 89       	ldd	r25, Y+20	; 0x14
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17aa:	88 23       	and	r24, r24
    17ac:	1c f4       	brge	.+6      	; 0x17b4 <ultrasonic_u16distance+0x84>
		__ticks = 1;
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	88 8b       	std	Y+16, r24	; 0x10
    17b2:	91 c0       	rjmp	.+290    	; 0x18d6 <ultrasonic_u16distance+0x1a6>
	else if (__tmp > 255)
    17b4:	69 89       	ldd	r22, Y+17	; 0x11
    17b6:	7a 89       	ldd	r23, Y+18	; 0x12
    17b8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ba:	9c 89       	ldd	r25, Y+20	; 0x14
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	53 e4       	ldi	r21, 0x43	; 67
    17c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	0c f0       	brlt	.+2      	; 0x17ce <ultrasonic_u16distance+0x9e>
    17cc:	7b c0       	rjmp	.+246    	; 0x18c4 <ultrasonic_u16distance+0x194>
	{
		_delay_ms(__us / 1000.0);
    17ce:	6d 89       	ldd	r22, Y+21	; 0x15
    17d0:	7e 89       	ldd	r23, Y+22	; 0x16
    17d2:	8f 89       	ldd	r24, Y+23	; 0x17
    17d4:	98 8d       	ldd	r25, Y+24	; 0x18
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	4a e7       	ldi	r20, 0x7A	; 122
    17dc:	54 e4       	ldi	r21, 0x44	; 68
    17de:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	8c 87       	std	Y+12, r24	; 0x0c
    17e8:	9d 87       	std	Y+13, r25	; 0x0d
    17ea:	ae 87       	std	Y+14, r26	; 0x0e
    17ec:	bf 87       	std	Y+15, r27	; 0x0f
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    17f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    17f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    17f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	4a e7       	ldi	r20, 0x7A	; 122
    17fc:	55 e4       	ldi	r21, 0x45	; 69
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	88 87       	std	Y+8, r24	; 0x08
    1808:	99 87       	std	Y+9, r25	; 0x09
    180a:	aa 87       	std	Y+10, r26	; 0x0a
    180c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    180e:	68 85       	ldd	r22, Y+8	; 0x08
    1810:	79 85       	ldd	r23, Y+9	; 0x09
    1812:	8a 85       	ldd	r24, Y+10	; 0x0a
    1814:	9b 85       	ldd	r25, Y+11	; 0x0b
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	40 e8       	ldi	r20, 0x80	; 128
    181c:	5f e3       	ldi	r21, 0x3F	; 63
    181e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1822:	88 23       	and	r24, r24
    1824:	2c f4       	brge	.+10     	; 0x1830 <ultrasonic_u16distance+0x100>
		__ticks = 1;
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	9f 83       	std	Y+7, r25	; 0x07
    182c:	8e 83       	std	Y+6, r24	; 0x06
    182e:	3f c0       	rjmp	.+126    	; 0x18ae <ultrasonic_u16distance+0x17e>
	else if (__tmp > 65535)
    1830:	68 85       	ldd	r22, Y+8	; 0x08
    1832:	79 85       	ldd	r23, Y+9	; 0x09
    1834:	8a 85       	ldd	r24, Y+10	; 0x0a
    1836:	9b 85       	ldd	r25, Y+11	; 0x0b
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	3f ef       	ldi	r19, 0xFF	; 255
    183c:	4f e7       	ldi	r20, 0x7F	; 127
    183e:	57 e4       	ldi	r21, 0x47	; 71
    1840:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1844:	18 16       	cp	r1, r24
    1846:	4c f5       	brge	.+82     	; 0x189a <ultrasonic_u16distance+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1848:	6c 85       	ldd	r22, Y+12	; 0x0c
    184a:	7d 85       	ldd	r23, Y+13	; 0x0d
    184c:	8e 85       	ldd	r24, Y+14	; 0x0e
    184e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	40 e2       	ldi	r20, 0x20	; 32
    1856:	51 e4       	ldi	r21, 0x41	; 65
    1858:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	bc 01       	movw	r22, r24
    1862:	cd 01       	movw	r24, r26
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9f 83       	std	Y+7, r25	; 0x07
    186e:	8e 83       	std	Y+6, r24	; 0x06
    1870:	0f c0       	rjmp	.+30     	; 0x1890 <ultrasonic_u16distance+0x160>
    1872:	80 e9       	ldi	r24, 0x90	; 144
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	9d 83       	std	Y+5, r25	; 0x05
    1878:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	9d 81       	ldd	r25, Y+5	; 0x05
    187e:	01 97       	sbiw	r24, 0x01	; 1
    1880:	f1 f7       	brne	.-4      	; 0x187e <ultrasonic_u16distance+0x14e>
    1882:	9d 83       	std	Y+5, r25	; 0x05
    1884:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1886:	8e 81       	ldd	r24, Y+6	; 0x06
    1888:	9f 81       	ldd	r25, Y+7	; 0x07
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	9f 83       	std	Y+7, r25	; 0x07
    188e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1890:	8e 81       	ldd	r24, Y+6	; 0x06
    1892:	9f 81       	ldd	r25, Y+7	; 0x07
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	69 f7       	brne	.-38     	; 0x1872 <ultrasonic_u16distance+0x142>
    1898:	24 c0       	rjmp	.+72     	; 0x18e2 <ultrasonic_u16distance+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189a:	68 85       	ldd	r22, Y+8	; 0x08
    189c:	79 85       	ldd	r23, Y+9	; 0x09
    189e:	8a 85       	ldd	r24, Y+10	; 0x0a
    18a0:	9b 85       	ldd	r25, Y+11	; 0x0b
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9f 83       	std	Y+7, r25	; 0x07
    18ac:	8e 83       	std	Y+6, r24	; 0x06
    18ae:	8e 81       	ldd	r24, Y+6	; 0x06
    18b0:	9f 81       	ldd	r25, Y+7	; 0x07
    18b2:	9b 83       	std	Y+3, r25	; 0x03
    18b4:	8a 83       	std	Y+2, r24	; 0x02
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	f1 f7       	brne	.-4      	; 0x18ba <ultrasonic_u16distance+0x18a>
    18be:	9b 83       	std	Y+3, r25	; 0x03
    18c0:	8a 83       	std	Y+2, r24	; 0x02
    18c2:	0f c0       	rjmp	.+30     	; 0x18e2 <ultrasonic_u16distance+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18c4:	69 89       	ldd	r22, Y+17	; 0x11
    18c6:	7a 89       	ldd	r23, Y+18	; 0x12
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	88 8b       	std	Y+16, r24	; 0x10
    18d6:	88 89       	ldd	r24, Y+16	; 0x10
    18d8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18da:	89 81       	ldd	r24, Y+1	; 0x01
    18dc:	8a 95       	dec	r24
    18de:	f1 f7       	brne	.-4      	; 0x18dc <ultrasonic_u16distance+0x1ac>
    18e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(50);
	M_Dio_void_setPinValue(triger_port,triger_pin,LOW);
    18e2:	89 a1       	ldd	r24, Y+33	; 0x21
    18e4:	6a a1       	ldd	r22, Y+34	; 0x22
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>

	TCCR1B = 0XC1;
    18ec:	ee e4       	ldi	r30, 0x4E	; 78
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	81 ec       	ldi	r24, 0xC1	; 193
    18f2:	80 83       	st	Z, r24
	while(0 == GET_BIT(TIFR,ICF1));
    18f4:	e8 e5       	ldi	r30, 0x58	; 88
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	82 95       	swap	r24
    18fc:	86 95       	lsr	r24
    18fe:	87 70       	andi	r24, 0x07	; 7
    1900:	88 2f       	mov	r24, r24
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	81 70       	andi	r24, 0x01	; 1
    1906:	90 70       	andi	r25, 0x00	; 0
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	a1 f3       	breq	.-24     	; 0x18f4 <ultrasonic_u16distance+0x1c4>
	a = ICR1;
    190c:	e6 e4       	ldi	r30, 0x46	; 70
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	98 a3       	std	Y+32, r25	; 0x20
    1916:	8f 8f       	std	Y+31, r24	; 0x1f
	//TIFR = (1<<ICF1);
	SET_BIT(TIFR,ICF1);
    1918:	a8 e5       	ldi	r26, 0x58	; 88
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e8 e5       	ldi	r30, 0x58	; 88
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	80 62       	ori	r24, 0x20	; 32
    1924:	8c 93       	st	X, r24
	TCCR1B = 0X81;
    1926:	ee e4       	ldi	r30, 0x4E	; 78
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	81 e8       	ldi	r24, 0x81	; 129
    192c:	80 83       	st	Z, r24
	while(0 == GET_BIT(TIFR,ICF1));
    192e:	e8 e5       	ldi	r30, 0x58	; 88
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	80 81       	ld	r24, Z
    1934:	82 95       	swap	r24
    1936:	86 95       	lsr	r24
    1938:	87 70       	andi	r24, 0x07	; 7
    193a:	88 2f       	mov	r24, r24
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	00 97       	sbiw	r24, 0x00	; 0
    1944:	a1 f3       	breq	.-24     	; 0x192e <ultrasonic_u16distance+0x1fe>
	b = ICR1;
    1946:	e6 e4       	ldi	r30, 0x46	; 70
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	9e 8f       	std	Y+30, r25	; 0x1e
    1950:	8d 8f       	std	Y+29, r24	; 0x1d
	//TIFR = (1<<ICF1);
	SET_BIT(TIFR,ICF1);
    1952:	a8 e5       	ldi	r26, 0x58	; 88
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e8 e5       	ldi	r30, 0x58	; 88
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	80 62       	ori	r24, 0x20	; 32
    195e:	8c 93       	st	X, r24
	TCNT1 = (u16)0;
    1960:	ec e4       	ldi	r30, 0x4C	; 76
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	11 82       	std	Z+1, r1	; 0x01
    1966:	10 82       	st	Z, r1
	TCCR1B = 0;
    1968:	ee e4       	ldi	r30, 0x4E	; 78
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	10 82       	st	Z, r1
	high = b - a;
    196e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1970:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1972:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1974:	98 a1       	ldd	r25, Y+32	; 0x20
    1976:	a9 01       	movw	r20, r18
    1978:	48 1b       	sub	r20, r24
    197a:	59 0b       	sbc	r21, r25
    197c:	ca 01       	movw	r24, r20
    197e:	9c 8f       	std	Y+28, r25	; 0x1c
    1980:	8b 8f       	std	Y+27, r24	; 0x1b
	distance = ((f32)(high*34600)/(16000000UL*2));
    1982:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1984:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1986:	cc 01       	movw	r24, r24
    1988:	a0 e0       	ldi	r26, 0x00	; 0
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	28 e2       	ldi	r18, 0x28	; 40
    198e:	37 e8       	ldi	r19, 0x87	; 135
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 a2 1b 	call	0x3744	; 0x3744 <__mulsi3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	34 e2       	ldi	r19, 0x24	; 36
    19b4:	44 ef       	ldi	r20, 0xF4	; 244
    19b6:	5b e4       	ldi	r21, 0x4B	; 75
    19b8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9a 8f       	std	Y+26, r25	; 0x1a
    19ce:	89 8f       	std	Y+25, r24	; 0x19
	return distance;
    19d0:	89 8d       	ldd	r24, Y+25	; 0x19
    19d2:	9a 8d       	ldd	r25, Y+26	; 0x1a
}
    19d4:	a2 96       	adiw	r28, 0x22	; 34
    19d6:	0f b6       	in	r0, 0x3f	; 63
    19d8:	f8 94       	cli
    19da:	de bf       	out	0x3e, r29	; 62
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	cd bf       	out	0x3d, r28	; 61
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <H_TempSensor_void_Init>:

#include "STD_TYPES.h"
#include "ADC_int.h"

void H_TempSensor_void_Init(void)
{
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_init();
    19ee:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_ADC_void_init>
}
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <H_TempSensor_u16_read>:

u16 H_TempSensor_u16_read(void)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <H_TempSensor_u16_read+0x6>
    19fe:	cd b7       	in	r28, 0x3d	; 61
    1a00:	de b7       	in	r29, 0x3e	; 62
	u16 Temp_Read =(M_ADC_u16_adcRead() * (f32) 500 ) / 1023 ;
    1a02:	0e 94 2c 0b 	call	0x1658	; 0x1658 <M_ADC_u16_adcRead>
    1a06:	cc 01       	movw	r24, r24
    1a08:	a0 e0       	ldi	r26, 0x00	; 0
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	cd 01       	movw	r24, r26
    1a10:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	4a ef       	ldi	r20, 0xFA	; 250
    1a22:	53 e4       	ldi	r21, 0x43	; 67
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 ec       	ldi	r19, 0xC0	; 192
    1a34:	4f e7       	ldi	r20, 0x7F	; 127
    1a36:	54 e4       	ldi	r21, 0x44	; 68
    1a38:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	bc 01       	movw	r22, r24
    1a42:	cd 01       	movw	r24, r26
    1a44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a48:	dc 01       	movw	r26, r24
    1a4a:	cb 01       	movw	r24, r22
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	return Temp_Read ;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	cf 91       	pop	r28
    1a5a:	df 91       	pop	r29
    1a5c:	08 95       	ret

00001a5e <H_Led_void_ledInit>:
#include "LED_priv.h"
#include "LED_config.h"
#include "LED_int.h"

void H_Led_void_ledInit(u8 LedID)
{
    1a5e:	df 93       	push	r29
    1a60:	cf 93       	push	r28
    1a62:	00 d0       	rcall	.+0      	; 0x1a64 <H_Led_void_ledInit+0x6>
    1a64:	0f 92       	push	r0
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	89 83       	std	Y+1, r24	; 0x01
  switch(LedID)
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	3b 83       	std	Y+3, r19	; 0x03
    1a74:	2a 83       	std	Y+2, r18	; 0x02
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7a:	81 30       	cpi	r24, 0x01	; 1
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	79 f0       	breq	.+30     	; 0x1a9e <H_Led_void_ledInit+0x40>
    1a80:	2a 81       	ldd	r18, Y+2	; 0x02
    1a82:	3b 81       	ldd	r19, Y+3	; 0x03
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	81 f0       	breq	.+32     	; 0x1aaa <H_Led_void_ledInit+0x4c>
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	89 f4       	brne	.+34     	; 0x1ab4 <H_Led_void_ledInit+0x56>
  {
  case RED_LED :
	 M_Dio_void_setPinDir(LED_RED_PORT,LED_RED_PIN,OUPUT);
    1a92:	83 e0       	ldi	r24, 0x03	; 3
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
    1a9c:	0b c0       	rjmp	.+22     	; 0x1ab4 <H_Led_void_ledInit+0x56>
	  break;
  case GRN_LED:
	  M_Dio_void_setPinDir(LED_GRN_PORT,LED_GRN_PIN,OUPUT);
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	61 e0       	ldi	r22, 0x01	; 1
    1aa2:	41 e0       	ldi	r20, 0x01	; 1
    1aa4:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <H_Led_void_ledInit+0x56>
	  break;
  case BLU_LED :
	  M_Dio_void_setPinDir(LED_BLU_PORT,LED_BLU_PIN,OUPUT);
    1aaa:	83 e0       	ldi	r24, 0x03	; 3
    1aac:	62 e0       	ldi	r22, 0x02	; 2
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	  break;
  }
}
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	cf 91       	pop	r28
    1abc:	df 91       	pop	r29
    1abe:	08 95       	ret

00001ac0 <H_Led_void_setON>:
void H_Led_void_setON(u8 LedID)
{
    1ac0:	df 93       	push	r29
    1ac2:	cf 93       	push	r28
    1ac4:	00 d0       	rcall	.+0      	; 0x1ac6 <H_Led_void_setON+0x6>
    1ac6:	0f 92       	push	r0
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	89 83       	std	Y+1, r24	; 0x01
	 switch(LedID)
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	3b 83       	std	Y+3, r19	; 0x03
    1ad6:	2a 83       	std	Y+2, r18	; 0x02
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	81 30       	cpi	r24, 0x01	; 1
    1ade:	91 05       	cpc	r25, r1
    1ae0:	79 f0       	breq	.+30     	; 0x1b00 <H_Led_void_setON+0x40>
    1ae2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ae6:	22 30       	cpi	r18, 0x02	; 2
    1ae8:	31 05       	cpc	r19, r1
    1aea:	81 f0       	breq	.+32     	; 0x1b0c <H_Led_void_setON+0x4c>
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	9b 81       	ldd	r25, Y+3	; 0x03
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	89 f4       	brne	.+34     	; 0x1b16 <H_Led_void_setON+0x56>
	  {
	  case RED_LED :
#if(LED_RED_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    1afe:	0b c0       	rjmp	.+22     	; 0x1b16 <H_Led_void_setON+0x56>
		  M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
#endif
		  break;
	  case GRN_LED:
#if(LED_GRN_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
    1b00:	83 e0       	ldi	r24, 0x03	; 3
    1b02:	61 e0       	ldi	r22, 0x01	; 1
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    1b0a:	05 c0       	rjmp	.+10     	; 0x1b16 <H_Led_void_setON+0x56>
		  M_Dio_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
#endif
		  break;
	  case BLU_LED :
#if(LED_BLU_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
    1b0c:	83 e0       	ldi	r24, 0x03	; 3
    1b0e:	62 e0       	ldi	r22, 0x02	; 2
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
#elif(LED_BLU_DIRECTION  ==   LED_REVERSE)
		  M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
#endif
		  break;
	  }
}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <H_Led_void_setOFF>:
void H_Led_void_setOFF(u8 LedID)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <H_Led_void_setOFF+0x6>
    1b28:	0f 92       	push	r0
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	 switch(LedID)
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	3b 83       	std	Y+3, r19	; 0x03
    1b38:	2a 83       	std	Y+2, r18	; 0x02
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b3e:	81 30       	cpi	r24, 0x01	; 1
    1b40:	91 05       	cpc	r25, r1
    1b42:	79 f0       	breq	.+30     	; 0x1b62 <H_Led_void_setOFF+0x40>
    1b44:	2a 81       	ldd	r18, Y+2	; 0x02
    1b46:	3b 81       	ldd	r19, Y+3	; 0x03
    1b48:	22 30       	cpi	r18, 0x02	; 2
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	81 f0       	breq	.+32     	; 0x1b6e <H_Led_void_setOFF+0x4c>
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	9b 81       	ldd	r25, Y+3	; 0x03
    1b52:	00 97       	sbiw	r24, 0x00	; 0
    1b54:	89 f4       	brne	.+34     	; 0x1b78 <H_Led_void_setOFF+0x56>
		  {
		  case RED_LED :
#if(LED_RED_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,LOW);
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    1b60:	0b c0       	rjmp	.+22     	; 0x1b78 <H_Led_void_setOFF+0x56>
		  M_Dio_void_setPinValue(LED_RED_PORT,LED_RED_PIN,HIGH);
#endif
			  break;
		  case GRN_LED:
#if(LED_GRN_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,LOW);
    1b62:	83 e0       	ldi	r24, 0x03	; 3
    1b64:	61 e0       	ldi	r22, 0x01	; 1
    1b66:	40 e0       	ldi	r20, 0x00	; 0
    1b68:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    1b6c:	05 c0       	rjmp	.+10     	; 0x1b78 <H_Led_void_setOFF+0x56>
		  M_Dio_void_setPinValue(LED_GRN_PORT,LED_GRN_PIN,HIGH);
#endif
			  break;
		  case BLU_LED :
#if(LED_BLU_DIRECTION  ==   LED_FORWARD)
		  M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,LOW);
    1b6e:	83 e0       	ldi	r24, 0x03	; 3
    1b70:	62 e0       	ldi	r22, 0x02	; 2
    1b72:	40 e0       	ldi	r20, 0x00	; 0
    1b74:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
		  M_Dio_void_setPinValue(LED_BLU_PORT,LED_BLU_PIN,HIGH);
#endif
			  break;
		  }

}
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <H_Led_void_toggle>:
void H_Led_void_toggle(u8 LedID)
{
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <H_Led_void_toggle+0x6>
    1b8a:	0f 92       	push	r0
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	89 83       	std	Y+1, r24	; 0x01
	 switch(LedID)
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	3b 83       	std	Y+3, r19	; 0x03
    1b9a:	2a 83       	std	Y+2, r18	; 0x02
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	9b 81       	ldd	r25, Y+3	; 0x03
    1ba0:	81 30       	cpi	r24, 0x01	; 1
    1ba2:	91 05       	cpc	r25, r1
    1ba4:	71 f0       	breq	.+28     	; 0x1bc2 <H_Led_void_toggle+0x3e>
    1ba6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ba8:	3b 81       	ldd	r19, Y+3	; 0x03
    1baa:	22 30       	cpi	r18, 0x02	; 2
    1bac:	31 05       	cpc	r19, r1
    1bae:	71 f0       	breq	.+28     	; 0x1bcc <H_Led_void_toggle+0x48>
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb4:	00 97       	sbiw	r24, 0x00	; 0
    1bb6:	71 f4       	brne	.+28     	; 0x1bd4 <H_Led_void_toggle+0x50>
		  {
		  case RED_LED :
			  M_Dio_void_TogPinValue(LED_RED_PORT,LED_RED_PIN);
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	60 e0       	ldi	r22, 0x00	; 0
    1bbc:	0e 94 92 0a 	call	0x1524	; 0x1524 <M_Dio_void_TogPinValue>
    1bc0:	09 c0       	rjmp	.+18     	; 0x1bd4 <H_Led_void_toggle+0x50>
			  break;
		  case GRN_LED:
			  M_Dio_void_TogPinValue(LED_GRN_PORT,LED_GRN_PIN);
    1bc2:	83 e0       	ldi	r24, 0x03	; 3
    1bc4:	61 e0       	ldi	r22, 0x01	; 1
    1bc6:	0e 94 92 0a 	call	0x1524	; 0x1524 <M_Dio_void_TogPinValue>
    1bca:	04 c0       	rjmp	.+8      	; 0x1bd4 <H_Led_void_toggle+0x50>
			  break;
		  case BLU_LED :
			  M_Dio_void_TogPinValue(LED_BLU_PORT,LED_BLU_PIN);
    1bcc:	83 e0       	ldi	r24, 0x03	; 3
    1bce:	62 e0       	ldi	r22, 0x02	; 2
    1bd0:	0e 94 92 0a 	call	0x1524	; 0x1524 <M_Dio_void_TogPinValue>
			  break;
		  }

}
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <H_LCD_void_Init>:

#include "LCD_priv.h"
#include "LCD_config.h"
#include "LCD_int.h"
void H_LCD_void_Init(void)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	aa 97       	sbiw	r28, 0x2a	; 42
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	f8 94       	cli
    1bee:	de bf       	out	0x3e, r29	; 62
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	cd bf       	out	0x3d, r28	; 61

	// set direction Rs, EN
	M_Dio_void_setPinDir(LCD_RS_PORT, LCD_RS_PIN,OUPUT);
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_EN_PORT,LCD_EN_PIN,OUPUT);
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	62 e0       	ldi	r22, 0x02	; 2
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	//set direction D4 .. D7
	M_Dio_void_setPinDir(LCD_D7_PORT,LCD_D7_PIN,OUPUT);
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	66 e0       	ldi	r22, 0x06	; 6
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D6_PORT,LCD_D6_PIN,OUPUT);
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	65 e0       	ldi	r22, 0x05	; 5
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D5_PORT,LCD_D5_PIN,OUPUT);
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	64 e0       	ldi	r22, 0x04	; 4
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(LCD_D4_PORT,LCD_D4_PIN,OUPUT);
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	63 e0       	ldi	r22, 0x03	; 3
    1c2a:	41 e0       	ldi	r20, 0x01	; 1
    1c2c:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	ac e0       	ldi	r26, 0x0C	; 12
    1c36:	b2 e4       	ldi	r27, 0x42	; 66
    1c38:	8f a3       	std	Y+39, r24	; 0x27
    1c3a:	98 a7       	std	Y+40, r25	; 0x28
    1c3c:	a9 a7       	std	Y+41, r26	; 0x29
    1c3e:	ba a7       	std	Y+42, r27	; 0x2a
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c40:	6f a1       	ldd	r22, Y+39	; 0x27
    1c42:	78 a5       	ldd	r23, Y+40	; 0x28
    1c44:	89 a5       	ldd	r24, Y+41	; 0x29
    1c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	4a e7       	ldi	r20, 0x7A	; 122
    1c4e:	55 e4       	ldi	r21, 0x45	; 69
    1c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	8b a3       	std	Y+35, r24	; 0x23
    1c5a:	9c a3       	std	Y+36, r25	; 0x24
    1c5c:	ad a3       	std	Y+37, r26	; 0x25
    1c5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c60:	6b a1       	ldd	r22, Y+35	; 0x23
    1c62:	7c a1       	ldd	r23, Y+36	; 0x24
    1c64:	8d a1       	ldd	r24, Y+37	; 0x25
    1c66:	9e a1       	ldd	r25, Y+38	; 0x26
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	2c f4       	brge	.+10     	; 0x1c82 <H_LCD_void_Init+0xa2>
		__ticks = 1;
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9a a3       	std	Y+34, r25	; 0x22
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
    1c80:	3f c0       	rjmp	.+126    	; 0x1d00 <H_LCD_void_Init+0x120>
	else if (__tmp > 65535)
    1c82:	6b a1       	ldd	r22, Y+35	; 0x23
    1c84:	7c a1       	ldd	r23, Y+36	; 0x24
    1c86:	8d a1       	ldd	r24, Y+37	; 0x25
    1c88:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	3f ef       	ldi	r19, 0xFF	; 255
    1c8e:	4f e7       	ldi	r20, 0x7F	; 127
    1c90:	57 e4       	ldi	r21, 0x47	; 71
    1c92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c96:	18 16       	cp	r1, r24
    1c98:	4c f5       	brge	.+82     	; 0x1cec <H_LCD_void_Init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ca0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e2       	ldi	r20, 0x20	; 32
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cae:	dc 01       	movw	r26, r24
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	9a a3       	std	Y+34, r25	; 0x22
    1cc0:	89 a3       	std	Y+33, r24	; 0x21
    1cc2:	0f c0       	rjmp	.+30     	; 0x1ce2 <H_LCD_void_Init+0x102>
    1cc4:	80 e9       	ldi	r24, 0x90	; 144
    1cc6:	91 e0       	ldi	r25, 0x01	; 1
    1cc8:	98 a3       	std	Y+32, r25	; 0x20
    1cca:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ccc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cce:	98 a1       	ldd	r25, Y+32	; 0x20
    1cd0:	01 97       	sbiw	r24, 0x01	; 1
    1cd2:	f1 f7       	brne	.-4      	; 0x1cd0 <H_LCD_void_Init+0xf0>
    1cd4:	98 a3       	std	Y+32, r25	; 0x20
    1cd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1cda:	9a a1       	ldd	r25, Y+34	; 0x22
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	9a a3       	std	Y+34, r25	; 0x22
    1ce0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce6:	00 97       	sbiw	r24, 0x00	; 0
    1ce8:	69 f7       	brne	.-38     	; 0x1cc4 <H_LCD_void_Init+0xe4>
    1cea:	14 c0       	rjmp	.+40     	; 0x1d14 <H_LCD_void_Init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cec:	6b a1       	ldd	r22, Y+35	; 0x23
    1cee:	7c a1       	ldd	r23, Y+36	; 0x24
    1cf0:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf2:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9a a3       	std	Y+34, r25	; 0x22
    1cfe:	89 a3       	std	Y+33, r24	; 0x21
    1d00:	89 a1       	ldd	r24, Y+33	; 0x21
    1d02:	9a a1       	ldd	r25, Y+34	; 0x22
    1d04:	9e 8f       	std	Y+30, r25	; 0x1e
    1d06:	8d 8f       	std	Y+29, r24	; 0x1d
    1d08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <H_LCD_void_Init+0x12c>
    1d10:	9e 8f       	std	Y+30, r25	; 0x1e
    1d12:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(35);
	H_LCD_void_sendCommand(LCD_8BIT_MODE_2LINES_5X7);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
	_delay_ms(35);
	// Rs = command = 0
	M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	61 e0       	ldi	r22, 0x01	; 1
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	// EN = 0 disabled
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	// prepare data
	M_Dio_void_setPinValue(LCD_D7_PORT,LCD_D7_PIN,0);
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	66 e0       	ldi	r22, 0x06	; 6
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D6_PORT,LCD_D6_PIN,0);
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	65 e0       	ldi	r22, 0x05	; 5
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D5_PORT,LCD_D5_PIN,1);
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	64 e0       	ldi	r22, 0x04	; 4
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(LCD_D4_PORT,LCD_D4_PIN,0);
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	63 e0       	ldi	r22, 0x03	; 3
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	//EN = 1
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,HIGH);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	62 e0       	ldi	r22, 0x02	; 2
    1d54:	41 e0       	ldi	r20, 0x01	; 1
    1d56:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	a0 e8       	ldi	r26, 0x80	; 128
    1d60:	bf e3       	ldi	r27, 0x3F	; 63
    1d62:	89 8f       	std	Y+25, r24	; 0x19
    1d64:	9a 8f       	std	Y+26, r25	; 0x1a
    1d66:	ab 8f       	std	Y+27, r26	; 0x1b
    1d68:	bc 8f       	std	Y+28, r27	; 0x1c
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	4a e7       	ldi	r20, 0x7A	; 122
    1d78:	55 e4       	ldi	r21, 0x45	; 69
    1d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8d 8b       	std	Y+21, r24	; 0x15
    1d84:	9e 8b       	std	Y+22, r25	; 0x16
    1d86:	af 8b       	std	Y+23, r26	; 0x17
    1d88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d90:	98 8d       	ldd	r25, Y+24	; 0x18
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	5f e3       	ldi	r21, 0x3F	; 63
    1d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d9e:	88 23       	and	r24, r24
    1da0:	2c f4       	brge	.+10     	; 0x1dac <H_LCD_void_Init+0x1cc>
		__ticks = 1;
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	9c 8b       	std	Y+20, r25	; 0x14
    1da8:	8b 8b       	std	Y+19, r24	; 0x13
    1daa:	3f c0       	rjmp	.+126    	; 0x1e2a <H_LCD_void_Init+0x24a>
	else if (__tmp > 65535)
    1dac:	6d 89       	ldd	r22, Y+21	; 0x15
    1dae:	7e 89       	ldd	r23, Y+22	; 0x16
    1db0:	8f 89       	ldd	r24, Y+23	; 0x17
    1db2:	98 8d       	ldd	r25, Y+24	; 0x18
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	3f ef       	ldi	r19, 0xFF	; 255
    1db8:	4f e7       	ldi	r20, 0x7F	; 127
    1dba:	57 e4       	ldi	r21, 0x47	; 71
    1dbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dc0:	18 16       	cp	r1, r24
    1dc2:	4c f5       	brge	.+82     	; 0x1e16 <H_LCD_void_Init+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dc4:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	40 e2       	ldi	r20, 0x20	; 32
    1dd2:	51 e4       	ldi	r21, 0x41	; 65
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9c 8b       	std	Y+20, r25	; 0x14
    1dea:	8b 8b       	std	Y+19, r24	; 0x13
    1dec:	0f c0       	rjmp	.+30     	; 0x1e0c <H_LCD_void_Init+0x22c>
    1dee:	80 e9       	ldi	r24, 0x90	; 144
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	9a 8b       	std	Y+18, r25	; 0x12
    1df4:	89 8b       	std	Y+17, r24	; 0x11
    1df6:	89 89       	ldd	r24, Y+17	; 0x11
    1df8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <H_LCD_void_Init+0x21a>
    1dfe:	9a 8b       	std	Y+18, r25	; 0x12
    1e00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e02:	8b 89       	ldd	r24, Y+19	; 0x13
    1e04:	9c 89       	ldd	r25, Y+20	; 0x14
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	9c 8b       	std	Y+20, r25	; 0x14
    1e0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	69 f7       	brne	.-38     	; 0x1dee <H_LCD_void_Init+0x20e>
    1e14:	14 c0       	rjmp	.+40     	; 0x1e3e <H_LCD_void_Init+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e16:	6d 89       	ldd	r22, Y+21	; 0x15
    1e18:	7e 89       	ldd	r23, Y+22	; 0x16
    1e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e22:	dc 01       	movw	r26, r24
    1e24:	cb 01       	movw	r24, r22
    1e26:	9c 8b       	std	Y+20, r25	; 0x14
    1e28:	8b 8b       	std	Y+19, r24	; 0x13
    1e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2e:	98 8b       	std	Y+16, r25	; 0x10
    1e30:	8f 87       	std	Y+15, r24	; 0x0f
    1e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e34:	98 89       	ldd	r25, Y+16	; 0x10
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	f1 f7       	brne	.-4      	; 0x1e36 <H_LCD_void_Init+0x256>
    1e3a:	98 8b       	std	Y+16, r25	; 0x10
    1e3c:	8f 87       	std	Y+15, r24	; 0x0f
	// delay 1 msec (to allow latching)
	_delay_ms(1);
	// EN = 0
	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	62 e0       	ldi	r22, 0x02	; 2
    1e42:	40 e0       	ldi	r20, 0x00	; 0
    1e44:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	a0 ea       	ldi	r26, 0xA0	; 160
    1e4e:	b0 e4       	ldi	r27, 0x40	; 64
    1e50:	8b 87       	std	Y+11, r24	; 0x0b
    1e52:	9c 87       	std	Y+12, r25	; 0x0c
    1e54:	ad 87       	std	Y+13, r26	; 0x0d
    1e56:	be 87       	std	Y+14, r27	; 0x0e
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	4a e7       	ldi	r20, 0x7A	; 122
    1e66:	55 e4       	ldi	r21, 0x45	; 69
    1e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	cb 01       	movw	r24, r22
    1e70:	8f 83       	std	Y+7, r24	; 0x07
    1e72:	98 87       	std	Y+8, r25	; 0x08
    1e74:	a9 87       	std	Y+9, r26	; 0x09
    1e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e78:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7a:	78 85       	ldd	r23, Y+8	; 0x08
    1e7c:	89 85       	ldd	r24, Y+9	; 0x09
    1e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e8       	ldi	r20, 0x80	; 128
    1e86:	5f e3       	ldi	r21, 0x3F	; 63
    1e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e8c:	88 23       	and	r24, r24
    1e8e:	2c f4       	brge	.+10     	; 0x1e9a <H_LCD_void_Init+0x2ba>
		__ticks = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9e 83       	std	Y+6, r25	; 0x06
    1e96:	8d 83       	std	Y+5, r24	; 0x05
    1e98:	3f c0       	rjmp	.+126    	; 0x1f18 <H_LCD_void_Init+0x338>
	else if (__tmp > 65535)
    1e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e9c:	78 85       	ldd	r23, Y+8	; 0x08
    1e9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	3f ef       	ldi	r19, 0xFF	; 255
    1ea6:	4f e7       	ldi	r20, 0x7F	; 127
    1ea8:	57 e4       	ldi	r21, 0x47	; 71
    1eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eae:	18 16       	cp	r1, r24
    1eb0:	4c f5       	brge	.+82     	; 0x1f04 <H_LCD_void_Init+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e2       	ldi	r20, 0x20	; 32
    1ec0:	51 e4       	ldi	r21, 0x41	; 65
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	bc 01       	movw	r22, r24
    1ecc:	cd 01       	movw	r24, r26
    1ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	9e 83       	std	Y+6, r25	; 0x06
    1ed8:	8d 83       	std	Y+5, r24	; 0x05
    1eda:	0f c0       	rjmp	.+30     	; 0x1efa <H_LCD_void_Init+0x31a>
    1edc:	80 e9       	ldi	r24, 0x90	; 144
    1ede:	91 e0       	ldi	r25, 0x01	; 1
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <H_LCD_void_Init+0x308>
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	9e 83       	std	Y+6, r25	; 0x06
    1ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1efa:	8d 81       	ldd	r24, Y+5	; 0x05
    1efc:	9e 81       	ldd	r25, Y+6	; 0x06
    1efe:	00 97       	sbiw	r24, 0x00	; 0
    1f00:	69 f7       	brne	.-38     	; 0x1edc <H_LCD_void_Init+0x2fc>
    1f02:	14 c0       	rjmp	.+40     	; 0x1f2c <H_LCD_void_Init+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	78 85       	ldd	r23, Y+8	; 0x08
    1f08:	89 85       	ldd	r24, Y+9	; 0x09
    1f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	9e 83       	std	Y+6, r25	; 0x06
    1f16:	8d 83       	std	Y+5, r24	; 0x05
    1f18:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	9a 81       	ldd	r25, Y+2	; 0x02
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <H_LCD_void_Init+0x344>
    1f28:	9a 83       	std	Y+2, r25	; 0x02
    1f2a:	89 83       	std	Y+1, r24	; 0x01
	// delay to allow processing
	_delay_ms(5);
	H_LCD_void_sendCommand(LCD_4BIT_MODE_2LINES_5X7);
    1f2c:	88 e2       	ldi	r24, 0x28	; 40
    1f2e:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <H_LCD_void_sendCommand>
#else
  #error("wrong LCD Mode")
#endif
	// display ON/OFF
	H_LCD_void_sendCommand(LCD_DISPON_CURSON_BLINKOFF);
    1f32:	8e e0       	ldi	r24, 0x0E	; 14
    1f34:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <H_LCD_void_sendCommand>
	// display Clear
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <H_LCD_void_sendCommand>
	// Entry Mode Set
	H_LCD_void_sendCommand(LCD_ENTRY_MODE_SET);
    1f3e:	86 e0       	ldi	r24, 0x06	; 6
    1f40:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <H_LCD_void_sendCommand>

}
    1f44:	aa 96       	adiw	r28, 0x2a	; 42
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	08 95       	ret

00001f56 <H_LCD_void_sendData>:
void H_LCD_void_sendData(u8 copy_u8data)
{
    1f56:	df 93       	push	r29
    1f58:	cf 93       	push	r28
    1f5a:	0f 92       	push	r0
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    1f60:	89 83       	std	Y+1, r24	; 0x01
  // step 1 : select RS to be in data mode (RS = 1)
   M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,HIGH);
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	61 e0       	ldi	r22, 0x01	; 1
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
  // step 2 : write data
   H_LCD_void_writeNlatch(copy_u8data);
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <H_LCD_void_writeNlatch>
}
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <H_LCD_void_sendCommand>:
void H_LCD_void_sendCommand(u8 copy_u8Command)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	0f 92       	push	r0
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	89 83       	std	Y+1, r24	; 0x01
	// step 1 : select RS to be in command mode (RS = 0)
	M_Dio_void_setPinValue(LCD_RS_PORT,LCD_RS_PIN,LOW);
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	61 e0       	ldi	r22, 0x01	; 1
    1f8a:	40 e0       	ldi	r20, 0x00	; 0
    1f8c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	// step 2 : write command
	H_LCD_void_writeNlatch(copy_u8Command);
    1f90:	89 81       	ldd	r24, Y+1	; 0x01
    1f92:	0e 94 d7 10 	call	0x21ae	; 0x21ae <H_LCD_void_writeNlatch>

}
    1f96:	0f 90       	pop	r0
    1f98:	cf 91       	pop	r28
    1f9a:	df 91       	pop	r29
    1f9c:	08 95       	ret

00001f9e <H_LCD_void_sendString>:
void H_LCD_void_sendString(const s8 * pstr)
{
    1f9e:	df 93       	push	r29
    1fa0:	cf 93       	push	r28
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <H_LCD_void_sendString+0x6>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	9a 83       	std	Y+2, r25	; 0x02
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	0a c0       	rjmp	.+20     	; 0x1fc2 <H_LCD_void_sendString+0x24>
   while(*pstr)
   {
	   H_LCD_void_sendData(*pstr);
    1fae:	e9 81       	ldd	r30, Y+1	; 0x01
    1fb0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fb2:	80 81       	ld	r24, Z
    1fb4:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
	   pstr++;
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	01 96       	adiw	r24, 0x01	; 1
    1fbe:	9a 83       	std	Y+2, r25	; 0x02
    1fc0:	89 83       	std	Y+1, r24	; 0x01
	H_LCD_void_writeNlatch(copy_u8Command);

}
void H_LCD_void_sendString(const s8 * pstr)
{
   while(*pstr)
    1fc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fc6:	80 81       	ld	r24, Z
    1fc8:	88 23       	and	r24, r24
    1fca:	89 f7       	brne	.-30     	; 0x1fae <H_LCD_void_sendString+0x10>
   {
	   H_LCD_void_sendData(*pstr);
	   pstr++;
   }
}
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <H_LCD_void_clear>:
void H_LCD_void_clear(void)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPALY);
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <H_LCD_void_sendCommand>
}
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	08 95       	ret

00001fea <H_LCD_void_sendIntNum>:
void H_LCD_void_sendIntNum(s32 copy_s32Num)
{
    1fea:	0f 93       	push	r16
    1fec:	1f 93       	push	r17
    1fee:	df 93       	push	r29
    1ff0:	cf 93       	push	r28
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	2f 97       	sbiw	r28, 0x0f	; 15
    1ff8:	0f b6       	in	r0, 0x3f	; 63
    1ffa:	f8 94       	cli
    1ffc:	de bf       	out	0x3e, r29	; 62
    1ffe:	0f be       	out	0x3f, r0	; 63
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	6c 87       	std	Y+12, r22	; 0x0c
    2004:	7d 87       	std	Y+13, r23	; 0x0d
    2006:	8e 87       	std	Y+14, r24	; 0x0e
    2008:	9f 87       	std	Y+15, r25	; 0x0f
   u8 Loc_Arr[10]= {0};
    200a:	8a e0       	ldi	r24, 0x0A	; 10
    200c:	fe 01       	movw	r30, r28
    200e:	32 96       	adiw	r30, 0x02	; 2
    2010:	df 01       	movw	r26, r30
    2012:	98 2f       	mov	r25, r24
    2014:	1d 92       	st	X+, r1
    2016:	9a 95       	dec	r25
    2018:	e9 f7       	brne	.-6      	; 0x2014 <H_LCD_void_sendIntNum+0x2a>
   s8 i = 0;
    201a:	19 82       	std	Y+1, r1	; 0x01
   if(copy_s32Num == 0)
    201c:	8c 85       	ldd	r24, Y+12	; 0x0c
    201e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2020:	ae 85       	ldd	r26, Y+14	; 0x0e
    2022:	bf 85       	ldd	r27, Y+15	; 0x0f
    2024:	00 97       	sbiw	r24, 0x00	; 0
    2026:	a1 05       	cpc	r26, r1
    2028:	b1 05       	cpc	r27, r1
    202a:	21 f4       	brne	.+8      	; 0x2034 <H_LCD_void_sendIntNum+0x4a>
   {
	   H_LCD_void_sendData('0');
    202c:	80 e3       	ldi	r24, 0x30	; 48
    202e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
    2032:	69 c0       	rjmp	.+210    	; 0x2106 <H_LCD_void_sendIntNum+0x11c>
	   return ;
   }
   else if(copy_s32Num < 0)//negative
    2034:	8c 85       	ldd	r24, Y+12	; 0x0c
    2036:	9d 85       	ldd	r25, Y+13	; 0x0d
    2038:	ae 85       	ldd	r26, Y+14	; 0x0e
    203a:	bf 85       	ldd	r27, Y+15	; 0x0f
    203c:	bb 23       	and	r27, r27
    203e:	0c f0       	brlt	.+2      	; 0x2042 <H_LCD_void_sendIntNum+0x58>
    2040:	42 c0       	rjmp	.+132    	; 0x20c6 <H_LCD_void_sendIntNum+0xdc>
   {
	   H_LCD_void_sendData('-');
    2042:	8d e2       	ldi	r24, 0x2D	; 45
    2044:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
	   copy_s32Num *= -1;
    2048:	8c 85       	ldd	r24, Y+12	; 0x0c
    204a:	9d 85       	ldd	r25, Y+13	; 0x0d
    204c:	ae 85       	ldd	r26, Y+14	; 0x0e
    204e:	bf 85       	ldd	r27, Y+15	; 0x0f
    2050:	b0 95       	com	r27
    2052:	a0 95       	com	r26
    2054:	90 95       	com	r25
    2056:	81 95       	neg	r24
    2058:	9f 4f       	sbci	r25, 0xFF	; 255
    205a:	af 4f       	sbci	r26, 0xFF	; 255
    205c:	bf 4f       	sbci	r27, 0xFF	; 255
    205e:	8c 87       	std	Y+12, r24	; 0x0c
    2060:	9d 87       	std	Y+13, r25	; 0x0d
    2062:	ae 87       	std	Y+14, r26	; 0x0e
    2064:	bf 87       	std	Y+15, r27	; 0x0f
    2066:	2f c0       	rjmp	.+94     	; 0x20c6 <H_LCD_void_sendIntNum+0xdc>
   }
   while(copy_s32Num != 0)
   {
	   Loc_Arr[i] = copy_s32Num % 10;
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	08 2f       	mov	r16, r24
    206c:	11 27       	eor	r17, r17
    206e:	07 fd       	sbrc	r16, 7
    2070:	10 95       	com	r17
    2072:	8c 85       	ldd	r24, Y+12	; 0x0c
    2074:	9d 85       	ldd	r25, Y+13	; 0x0d
    2076:	ae 85       	ldd	r26, Y+14	; 0x0e
    2078:	bf 85       	ldd	r27, Y+15	; 0x0f
    207a:	2a e0       	ldi	r18, 0x0A	; 10
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	bc 01       	movw	r22, r24
    2084:	cd 01       	movw	r24, r26
    2086:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__divmodsi4>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	28 2f       	mov	r18, r24
    2090:	ce 01       	movw	r24, r28
    2092:	02 96       	adiw	r24, 0x02	; 2
    2094:	fc 01       	movw	r30, r24
    2096:	e0 0f       	add	r30, r16
    2098:	f1 1f       	adc	r31, r17
    209a:	20 83       	st	Z, r18
	   copy_s32Num = copy_s32Num /10 ;
    209c:	8c 85       	ldd	r24, Y+12	; 0x0c
    209e:	9d 85       	ldd	r25, Y+13	; 0x0d
    20a0:	ae 85       	ldd	r26, Y+14	; 0x0e
    20a2:	bf 85       	ldd	r27, Y+15	; 0x0f
    20a4:	2a e0       	ldi	r18, 0x0A	; 10
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	50 e0       	ldi	r21, 0x00	; 0
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__divmodsi4>
    20b4:	da 01       	movw	r26, r20
    20b6:	c9 01       	movw	r24, r18
    20b8:	8c 87       	std	Y+12, r24	; 0x0c
    20ba:	9d 87       	std	Y+13, r25	; 0x0d
    20bc:	ae 87       	std	Y+14, r26	; 0x0e
    20be:	bf 87       	std	Y+15, r27	; 0x0f
	   i++;
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
    20c2:	8f 5f       	subi	r24, 0xFF	; 255
    20c4:	89 83       	std	Y+1, r24	; 0x01
   else if(copy_s32Num < 0)//negative
   {
	   H_LCD_void_sendData('-');
	   copy_s32Num *= -1;
   }
   while(copy_s32Num != 0)
    20c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    20c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    20ca:	ae 85       	ldd	r26, Y+14	; 0x0e
    20cc:	bf 85       	ldd	r27, Y+15	; 0x0f
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	a1 05       	cpc	r26, r1
    20d2:	b1 05       	cpc	r27, r1
    20d4:	49 f6       	brne	.-110    	; 0x2068 <H_LCD_void_sendIntNum+0x7e>
   {
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	81 50       	subi	r24, 0x01	; 1
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	11 c0       	rjmp	.+34     	; 0x2100 <H_LCD_void_sendIntNum+0x116>
   while(i>=0)
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
    20de:	89 81       	ldd	r24, Y+1	; 0x01
    20e0:	28 2f       	mov	r18, r24
    20e2:	33 27       	eor	r19, r19
    20e4:	27 fd       	sbrc	r18, 7
    20e6:	30 95       	com	r19
    20e8:	ce 01       	movw	r24, r28
    20ea:	02 96       	adiw	r24, 0x02	; 2
    20ec:	fc 01       	movw	r30, r24
    20ee:	e2 0f       	add	r30, r18
    20f0:	f3 1f       	adc	r31, r19
    20f2:	80 81       	ld	r24, Z
    20f4:	80 5d       	subi	r24, 0xD0	; 208
    20f6:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
	   i--;
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	81 50       	subi	r24, 0x01	; 1
    20fe:	89 83       	std	Y+1, r24	; 0x01
	   Loc_Arr[i] = copy_s32Num % 10;
	   copy_s32Num = copy_s32Num /10 ;
	   i++;
   }
   i--;
   while(i>=0)
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	88 23       	and	r24, r24
    2104:	64 f7       	brge	.-40     	; 0x20de <H_LCD_void_sendIntNum+0xf4>
   {
	   H_LCD_void_sendData(Loc_Arr[i]+'0');
	   i--;
   }
}
    2106:	2f 96       	adiw	r28, 0x0f	; 15
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	cf 91       	pop	r28
    2114:	df 91       	pop	r29
    2116:	1f 91       	pop	r17
    2118:	0f 91       	pop	r16
    211a:	08 95       	ret

0000211c <H_LCD_void_gotXY>:
void H_LCD_void_gotXY(u8 copy_u8Row,u8 copy_u8Col)
{
    211c:	df 93       	push	r29
    211e:	cf 93       	push	r28
    2120:	00 d0       	rcall	.+0      	; 0x2122 <H_LCD_void_gotXY+0x6>
    2122:	00 d0       	rcall	.+0      	; 0x2124 <H_LCD_void_gotXY+0x8>
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
    2128:	89 83       	std	Y+1, r24	; 0x01
    212a:	6a 83       	std	Y+2, r22	; 0x02
  if(copy_u8Row == 0 || copy_u8Row == 1) //check on row
    212c:	89 81       	ldd	r24, Y+1	; 0x01
    212e:	88 23       	and	r24, r24
    2130:	19 f0       	breq	.+6      	; 0x2138 <H_LCD_void_gotXY+0x1c>
    2132:	89 81       	ldd	r24, Y+1	; 0x01
    2134:	81 30       	cpi	r24, 0x01	; 1
    2136:	d9 f4       	brne	.+54     	; 0x216e <H_LCD_void_gotXY+0x52>
  {
	  if(copy_u8Col >= 0 && copy_u8Col <= 15)// check on col
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	80 31       	cpi	r24, 0x10	; 16
    213c:	c0 f4       	brcc	.+48     	; 0x216e <H_LCD_void_gotXY+0x52>
	  {
          switch(copy_u8Row)
    213e:	89 81       	ldd	r24, Y+1	; 0x01
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	3c 83       	std	Y+4, r19	; 0x04
    2146:	2b 83       	std	Y+3, r18	; 0x03
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	00 97       	sbiw	r24, 0x00	; 0
    214e:	31 f0       	breq	.+12     	; 0x215c <H_LCD_void_gotXY+0x40>
    2150:	2b 81       	ldd	r18, Y+3	; 0x03
    2152:	3c 81       	ldd	r19, Y+4	; 0x04
    2154:	21 30       	cpi	r18, 0x01	; 1
    2156:	31 05       	cpc	r19, r1
    2158:	31 f0       	breq	.+12     	; 0x2166 <H_LCD_void_gotXY+0x4a>
    215a:	09 c0       	rjmp	.+18     	; 0x216e <H_LCD_void_gotXY+0x52>
          {
          case 0 :
        	  H_LCD_void_sendCommand(LCD_SET_R0C0_ + copy_u8Col);
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	80 58       	subi	r24, 0x80	; 128
    2160:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <H_LCD_void_sendCommand>
    2164:	04 c0       	rjmp	.+8      	; 0x216e <H_LCD_void_gotXY+0x52>
        	  break;
          case 1 :
        	  H_LCD_void_sendCommand(LCD_SET_R1C0_ + copy_u8Col);
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	80 54       	subi	r24, 0x40	; 64
    216a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <H_LCD_void_sendCommand>
        	  break;
          }
	  }
  }
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	cf 91       	pop	r28
    2178:	df 91       	pop	r29
    217a:	08 95       	ret

0000217c <H_LCD_void_creatCustomChar>:
void H_LCD_void_creatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    217c:	df 93       	push	r29
    217e:	cf 93       	push	r28
    2180:	00 d0       	rcall	.+0      	; 0x2182 <H_LCD_void_creatCustomChar+0x6>
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	6b 83       	std	Y+3, r22	; 0x03

}
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	cf 91       	pop	r28
    2196:	df 91       	pop	r29
    2198:	08 95       	ret

0000219a <H_LCD_void_displayCustomChar>:
void H_LCD_void_displayCustomChar(u8 copy_u8charCode)
{
    219a:	df 93       	push	r29
    219c:	cf 93       	push	r28
    219e:	0f 92       	push	r0
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	89 83       	std	Y+1, r24	; 0x01

}
    21a6:	0f 90       	pop	r0
    21a8:	cf 91       	pop	r28
    21aa:	df 91       	pop	r29
    21ac:	08 95       	ret

000021ae <H_LCD_void_writeNlatch>:
static void H_LCD_void_writeNlatch(u8 copy_u8Byte)
{
    21ae:	df 93       	push	r29
    21b0:	cf 93       	push	r28
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	e9 97       	sbiw	r28, 0x39	; 57
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	89 af       	std	Y+57, r24	; 0x39
 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
  // step 5 : delay to allow LCD to process
 	_delay_ms(5);
#elif(LCD_MODE ==  LCD_4BIT_MODE_)
 	// EN = 0 disabled
 	M_Dio_void_setPinValue(LCD_EN_PORT,LCD_EN_PIN,LOW);
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	62 e0       	ldi	r22, 0x02	; 2
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	// devide Byte to 2 (4 bits )
 	// step 1 :send high order bits on pins (D7 .. D4)
 	M_Dio_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,4));
    21ce:	89 ad       	ldd	r24, Y+57	; 0x39
    21d0:	82 95       	swap	r24
    21d2:	8f 70       	andi	r24, 0x0F	; 15
    21d4:	98 2f       	mov	r25, r24
    21d6:	91 70       	andi	r25, 0x01	; 1
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	63 e0       	ldi	r22, 0x03	; 3
    21dc:	49 2f       	mov	r20, r25
    21de:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,5));
    21e2:	89 ad       	ldd	r24, Y+57	; 0x39
    21e4:	82 95       	swap	r24
    21e6:	86 95       	lsr	r24
    21e8:	87 70       	andi	r24, 0x07	; 7
    21ea:	98 2f       	mov	r25, r24
    21ec:	91 70       	andi	r25, 0x01	; 1
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	64 e0       	ldi	r22, 0x04	; 4
    21f2:	49 2f       	mov	r20, r25
    21f4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,6));
    21f8:	89 ad       	ldd	r24, Y+57	; 0x39
    21fa:	82 95       	swap	r24
    21fc:	86 95       	lsr	r24
    21fe:	86 95       	lsr	r24
    2200:	83 70       	andi	r24, 0x03	; 3
    2202:	98 2f       	mov	r25, r24
    2204:	91 70       	andi	r25, 0x01	; 1
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	65 e0       	ldi	r22, 0x05	; 5
    220a:	49 2f       	mov	r20, r25
    220c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	M_Dio_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,7));
    2210:	89 ad       	ldd	r24, Y+57	; 0x39
    2212:	98 2f       	mov	r25, r24
    2214:	99 1f       	adc	r25, r25
    2216:	99 27       	eor	r25, r25
    2218:	99 1f       	adc	r25, r25
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	66 e0       	ldi	r22, 0x06	; 6
    221e:	49 2f       	mov	r20, r25
    2220:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	  //step 2 : Activate Enable ,( E = 1)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	62 e0       	ldi	r22, 0x02	; 2
    2228:	41 e0       	ldi	r20, 0x01	; 1
    222a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a0 e8       	ldi	r26, 0x80	; 128
    2234:	bf e3       	ldi	r27, 0x3F	; 63
    2236:	8d ab       	std	Y+53, r24	; 0x35
    2238:	9e ab       	std	Y+54, r25	; 0x36
    223a:	af ab       	std	Y+55, r26	; 0x37
    223c:	b8 af       	std	Y+56, r27	; 0x38
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    223e:	6d a9       	ldd	r22, Y+53	; 0x35
    2240:	7e a9       	ldd	r23, Y+54	; 0x36
    2242:	8f a9       	ldd	r24, Y+55	; 0x37
    2244:	98 ad       	ldd	r25, Y+56	; 0x38
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	4a e7       	ldi	r20, 0x7A	; 122
    224c:	55 e4       	ldi	r21, 0x45	; 69
    224e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	89 ab       	std	Y+49, r24	; 0x31
    2258:	9a ab       	std	Y+50, r25	; 0x32
    225a:	ab ab       	std	Y+51, r26	; 0x33
    225c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    225e:	69 a9       	ldd	r22, Y+49	; 0x31
    2260:	7a a9       	ldd	r23, Y+50	; 0x32
    2262:	8b a9       	ldd	r24, Y+51	; 0x33
    2264:	9c a9       	ldd	r25, Y+52	; 0x34
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e8       	ldi	r20, 0x80	; 128
    226c:	5f e3       	ldi	r21, 0x3F	; 63
    226e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2272:	88 23       	and	r24, r24
    2274:	2c f4       	brge	.+10     	; 0x2280 <H_LCD_void_writeNlatch+0xd2>
		__ticks = 1;
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	98 ab       	std	Y+48, r25	; 0x30
    227c:	8f a7       	std	Y+47, r24	; 0x2f
    227e:	3f c0       	rjmp	.+126    	; 0x22fe <H_LCD_void_writeNlatch+0x150>
	else if (__tmp > 65535)
    2280:	69 a9       	ldd	r22, Y+49	; 0x31
    2282:	7a a9       	ldd	r23, Y+50	; 0x32
    2284:	8b a9       	ldd	r24, Y+51	; 0x33
    2286:	9c a9       	ldd	r25, Y+52	; 0x34
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	3f ef       	ldi	r19, 0xFF	; 255
    228c:	4f e7       	ldi	r20, 0x7F	; 127
    228e:	57 e4       	ldi	r21, 0x47	; 71
    2290:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2294:	18 16       	cp	r1, r24
    2296:	4c f5       	brge	.+82     	; 0x22ea <H_LCD_void_writeNlatch+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2298:	6d a9       	ldd	r22, Y+53	; 0x35
    229a:	7e a9       	ldd	r23, Y+54	; 0x36
    229c:	8f a9       	ldd	r24, Y+55	; 0x37
    229e:	98 ad       	ldd	r25, Y+56	; 0x38
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 e2       	ldi	r20, 0x20	; 32
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	bc 01       	movw	r22, r24
    22b2:	cd 01       	movw	r24, r26
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	98 ab       	std	Y+48, r25	; 0x30
    22be:	8f a7       	std	Y+47, r24	; 0x2f
    22c0:	0f c0       	rjmp	.+30     	; 0x22e0 <H_LCD_void_writeNlatch+0x132>
    22c2:	80 e9       	ldi	r24, 0x90	; 144
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	9e a7       	std	Y+46, r25	; 0x2e
    22c8:	8d a7       	std	Y+45, r24	; 0x2d
    22ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    22cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    22ce:	01 97       	sbiw	r24, 0x01	; 1
    22d0:	f1 f7       	brne	.-4      	; 0x22ce <H_LCD_void_writeNlatch+0x120>
    22d2:	9e a7       	std	Y+46, r25	; 0x2e
    22d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22d8:	98 a9       	ldd	r25, Y+48	; 0x30
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	98 ab       	std	Y+48, r25	; 0x30
    22de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e2:	98 a9       	ldd	r25, Y+48	; 0x30
    22e4:	00 97       	sbiw	r24, 0x00	; 0
    22e6:	69 f7       	brne	.-38     	; 0x22c2 <H_LCD_void_writeNlatch+0x114>
    22e8:	14 c0       	rjmp	.+40     	; 0x2312 <H_LCD_void_writeNlatch+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ea:	69 a9       	ldd	r22, Y+49	; 0x31
    22ec:	7a a9       	ldd	r23, Y+50	; 0x32
    22ee:	8b a9       	ldd	r24, Y+51	; 0x33
    22f0:	9c a9       	ldd	r25, Y+52	; 0x34
    22f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	98 ab       	std	Y+48, r25	; 0x30
    22fc:	8f a7       	std	Y+47, r24	; 0x2f
    22fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2300:	98 a9       	ldd	r25, Y+48	; 0x30
    2302:	9c a7       	std	Y+44, r25	; 0x2c
    2304:	8b a7       	std	Y+43, r24	; 0x2b
    2306:	8b a5       	ldd	r24, Y+43	; 0x2b
    2308:	9c a5       	ldd	r25, Y+44	; 0x2c
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	f1 f7       	brne	.-4      	; 0x230a <H_LCD_void_writeNlatch+0x15c>
    230e:	9c a7       	std	Y+44, r25	; 0x2c
    2310:	8b a7       	std	Y+43, r24	; 0x2b
 	  // step 3 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	  // step 4 : deactivate Enable (E = 0)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    2312:	81 e0       	ldi	r24, 0x01	; 1
    2314:	62 e0       	ldi	r22, 0x02	; 2
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	a0 ea       	ldi	r26, 0xA0	; 160
    2322:	b0 e4       	ldi	r27, 0x40	; 64
    2324:	8f a3       	std	Y+39, r24	; 0x27
    2326:	98 a7       	std	Y+40, r25	; 0x28
    2328:	a9 a7       	std	Y+41, r26	; 0x29
    232a:	ba a7       	std	Y+42, r27	; 0x2a
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232c:	6f a1       	ldd	r22, Y+39	; 0x27
    232e:	78 a5       	ldd	r23, Y+40	; 0x28
    2330:	89 a5       	ldd	r24, Y+41	; 0x29
    2332:	9a a5       	ldd	r25, Y+42	; 0x2a
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	4a e7       	ldi	r20, 0x7A	; 122
    233a:	55 e4       	ldi	r21, 0x45	; 69
    233c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	8b a3       	std	Y+35, r24	; 0x23
    2346:	9c a3       	std	Y+36, r25	; 0x24
    2348:	ad a3       	std	Y+37, r26	; 0x25
    234a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    234c:	6b a1       	ldd	r22, Y+35	; 0x23
    234e:	7c a1       	ldd	r23, Y+36	; 0x24
    2350:	8d a1       	ldd	r24, Y+37	; 0x25
    2352:	9e a1       	ldd	r25, Y+38	; 0x26
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	40 e8       	ldi	r20, 0x80	; 128
    235a:	5f e3       	ldi	r21, 0x3F	; 63
    235c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2360:	88 23       	and	r24, r24
    2362:	2c f4       	brge	.+10     	; 0x236e <H_LCD_void_writeNlatch+0x1c0>
		__ticks = 1;
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	9a a3       	std	Y+34, r25	; 0x22
    236a:	89 a3       	std	Y+33, r24	; 0x21
    236c:	3f c0       	rjmp	.+126    	; 0x23ec <H_LCD_void_writeNlatch+0x23e>
	else if (__tmp > 65535)
    236e:	6b a1       	ldd	r22, Y+35	; 0x23
    2370:	7c a1       	ldd	r23, Y+36	; 0x24
    2372:	8d a1       	ldd	r24, Y+37	; 0x25
    2374:	9e a1       	ldd	r25, Y+38	; 0x26
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	3f ef       	ldi	r19, 0xFF	; 255
    237a:	4f e7       	ldi	r20, 0x7F	; 127
    237c:	57 e4       	ldi	r21, 0x47	; 71
    237e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2382:	18 16       	cp	r1, r24
    2384:	4c f5       	brge	.+82     	; 0x23d8 <H_LCD_void_writeNlatch+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2386:	6f a1       	ldd	r22, Y+39	; 0x27
    2388:	78 a5       	ldd	r23, Y+40	; 0x28
    238a:	89 a5       	ldd	r24, Y+41	; 0x29
    238c:	9a a5       	ldd	r25, Y+42	; 0x2a
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	40 e2       	ldi	r20, 0x20	; 32
    2394:	51 e4       	ldi	r21, 0x41	; 65
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	bc 01       	movw	r22, r24
    23a0:	cd 01       	movw	r24, r26
    23a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9a a3       	std	Y+34, r25	; 0x22
    23ac:	89 a3       	std	Y+33, r24	; 0x21
    23ae:	0f c0       	rjmp	.+30     	; 0x23ce <H_LCD_void_writeNlatch+0x220>
    23b0:	80 e9       	ldi	r24, 0x90	; 144
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	98 a3       	std	Y+32, r25	; 0x20
    23b6:	8f 8f       	std	Y+31, r24	; 0x1f
    23b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23ba:	98 a1       	ldd	r25, Y+32	; 0x20
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <H_LCD_void_writeNlatch+0x20e>
    23c0:	98 a3       	std	Y+32, r25	; 0x20
    23c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c4:	89 a1       	ldd	r24, Y+33	; 0x21
    23c6:	9a a1       	ldd	r25, Y+34	; 0x22
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	9a a3       	std	Y+34, r25	; 0x22
    23cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ce:	89 a1       	ldd	r24, Y+33	; 0x21
    23d0:	9a a1       	ldd	r25, Y+34	; 0x22
    23d2:	00 97       	sbiw	r24, 0x00	; 0
    23d4:	69 f7       	brne	.-38     	; 0x23b0 <H_LCD_void_writeNlatch+0x202>
    23d6:	14 c0       	rjmp	.+40     	; 0x2400 <H_LCD_void_writeNlatch+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d8:	6b a1       	ldd	r22, Y+35	; 0x23
    23da:	7c a1       	ldd	r23, Y+36	; 0x24
    23dc:	8d a1       	ldd	r24, Y+37	; 0x25
    23de:	9e a1       	ldd	r25, Y+38	; 0x26
    23e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	9a a3       	std	Y+34, r25	; 0x22
    23ea:	89 a3       	std	Y+33, r24	; 0x21
    23ec:	89 a1       	ldd	r24, Y+33	; 0x21
    23ee:	9a a1       	ldd	r25, Y+34	; 0x22
    23f0:	9e 8f       	std	Y+30, r25	; 0x1e
    23f2:	8d 8f       	std	Y+29, r24	; 0x1d
    23f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <H_LCD_void_writeNlatch+0x24a>
    23fc:	9e 8f       	std	Y+30, r25	; 0x1e
    23fe:	8d 8f       	std	Y+29, r24	; 0x1d
 	  // step 5 : delay to allow LCD to process
 	 	_delay_ms(5);
 	 	// step 6 :send Low order bits on pins (D7 .. D4)
 	 	M_Dio_void_setPinValue(LCD_D4_PORT ,LCD_D4_PIN  , GET_BIT(copy_u8Byte,0));
    2400:	89 ad       	ldd	r24, Y+57	; 0x39
    2402:	98 2f       	mov	r25, r24
    2404:	91 70       	andi	r25, 0x01	; 1
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	63 e0       	ldi	r22, 0x03	; 3
    240a:	49 2f       	mov	r20, r25
    240c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D5_PORT ,LCD_D5_PIN  , GET_BIT(copy_u8Byte,1));
    2410:	89 ad       	ldd	r24, Y+57	; 0x39
    2412:	86 95       	lsr	r24
    2414:	98 2f       	mov	r25, r24
    2416:	91 70       	andi	r25, 0x01	; 1
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	64 e0       	ldi	r22, 0x04	; 4
    241c:	49 2f       	mov	r20, r25
    241e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D6_PORT ,LCD_D6_PIN  , GET_BIT(copy_u8Byte,2));
    2422:	89 ad       	ldd	r24, Y+57	; 0x39
    2424:	86 95       	lsr	r24
    2426:	86 95       	lsr	r24
    2428:	98 2f       	mov	r25, r24
    242a:	91 70       	andi	r25, 0x01	; 1
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	65 e0       	ldi	r22, 0x05	; 5
    2430:	49 2f       	mov	r20, r25
    2432:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	 	M_Dio_void_setPinValue(LCD_D7_PORT ,LCD_D7_PIN  , GET_BIT(copy_u8Byte,3));
    2436:	89 ad       	ldd	r24, Y+57	; 0x39
    2438:	86 95       	lsr	r24
    243a:	86 95       	lsr	r24
    243c:	86 95       	lsr	r24
    243e:	98 2f       	mov	r25, r24
    2440:	91 70       	andi	r25, 0x01	; 1
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	66 e0       	ldi	r22, 0x06	; 6
    2446:	49 2f       	mov	r20, r25
    2448:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
 	 	 //step 7 : Activate Enable ,( E = 1)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,HIGH);
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	62 e0       	ldi	r22, 0x02	; 2
    2450:	41 e0       	ldi	r20, 0x01	; 1
    2452:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a0 e8       	ldi	r26, 0x80	; 128
    245c:	bf e3       	ldi	r27, 0x3F	; 63
    245e:	89 8f       	std	Y+25, r24	; 0x19
    2460:	9a 8f       	std	Y+26, r25	; 0x1a
    2462:	ab 8f       	std	Y+27, r26	; 0x1b
    2464:	bc 8f       	std	Y+28, r27	; 0x1c
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2466:	69 8d       	ldd	r22, Y+25	; 0x19
    2468:	7a 8d       	ldd	r23, Y+26	; 0x1a
    246a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    246c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a e7       	ldi	r20, 0x7A	; 122
    2474:	55 e4       	ldi	r21, 0x45	; 69
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	8d 8b       	std	Y+21, r24	; 0x15
    2480:	9e 8b       	std	Y+22, r25	; 0x16
    2482:	af 8b       	std	Y+23, r26	; 0x17
    2484:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2486:	6d 89       	ldd	r22, Y+21	; 0x15
    2488:	7e 89       	ldd	r23, Y+22	; 0x16
    248a:	8f 89       	ldd	r24, Y+23	; 0x17
    248c:	98 8d       	ldd	r25, Y+24	; 0x18
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e8       	ldi	r20, 0x80	; 128
    2494:	5f e3       	ldi	r21, 0x3F	; 63
    2496:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    249a:	88 23       	and	r24, r24
    249c:	2c f4       	brge	.+10     	; 0x24a8 <H_LCD_void_writeNlatch+0x2fa>
		__ticks = 1;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 8b       	std	Y+20, r25	; 0x14
    24a4:	8b 8b       	std	Y+19, r24	; 0x13
    24a6:	3f c0       	rjmp	.+126    	; 0x2526 <H_LCD_void_writeNlatch+0x378>
	else if (__tmp > 65535)
    24a8:	6d 89       	ldd	r22, Y+21	; 0x15
    24aa:	7e 89       	ldd	r23, Y+22	; 0x16
    24ac:	8f 89       	ldd	r24, Y+23	; 0x17
    24ae:	98 8d       	ldd	r25, Y+24	; 0x18
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	3f ef       	ldi	r19, 0xFF	; 255
    24b4:	4f e7       	ldi	r20, 0x7F	; 127
    24b6:	57 e4       	ldi	r21, 0x47	; 71
    24b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24bc:	18 16       	cp	r1, r24
    24be:	4c f5       	brge	.+82     	; 0x2512 <H_LCD_void_writeNlatch+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c0:	69 8d       	ldd	r22, Y+25	; 0x19
    24c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9c 8b       	std	Y+20, r25	; 0x14
    24e6:	8b 8b       	std	Y+19, r24	; 0x13
    24e8:	0f c0       	rjmp	.+30     	; 0x2508 <H_LCD_void_writeNlatch+0x35a>
    24ea:	80 e9       	ldi	r24, 0x90	; 144
    24ec:	91 e0       	ldi	r25, 0x01	; 1
    24ee:	9a 8b       	std	Y+18, r25	; 0x12
    24f0:	89 8b       	std	Y+17, r24	; 0x11
    24f2:	89 89       	ldd	r24, Y+17	; 0x11
    24f4:	9a 89       	ldd	r25, Y+18	; 0x12
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <H_LCD_void_writeNlatch+0x348>
    24fa:	9a 8b       	std	Y+18, r25	; 0x12
    24fc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fe:	8b 89       	ldd	r24, Y+19	; 0x13
    2500:	9c 89       	ldd	r25, Y+20	; 0x14
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	9c 8b       	std	Y+20, r25	; 0x14
    2506:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2508:	8b 89       	ldd	r24, Y+19	; 0x13
    250a:	9c 89       	ldd	r25, Y+20	; 0x14
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	69 f7       	brne	.-38     	; 0x24ea <H_LCD_void_writeNlatch+0x33c>
    2510:	14 c0       	rjmp	.+40     	; 0x253a <H_LCD_void_writeNlatch+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2512:	6d 89       	ldd	r22, Y+21	; 0x15
    2514:	7e 89       	ldd	r23, Y+22	; 0x16
    2516:	8f 89       	ldd	r24, Y+23	; 0x17
    2518:	98 8d       	ldd	r25, Y+24	; 0x18
    251a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9c 8b       	std	Y+20, r25	; 0x14
    2524:	8b 8b       	std	Y+19, r24	; 0x13
    2526:	8b 89       	ldd	r24, Y+19	; 0x13
    2528:	9c 89       	ldd	r25, Y+20	; 0x14
    252a:	98 8b       	std	Y+16, r25	; 0x10
    252c:	8f 87       	std	Y+15, r24	; 0x0f
    252e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2530:	98 89       	ldd	r25, Y+16	; 0x10
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <H_LCD_void_writeNlatch+0x384>
    2536:	98 8b       	std	Y+16, r25	; 0x10
    2538:	8f 87       	std	Y+15, r24	; 0x0f
 	 	 // step 8 : delay for 1 msec 	to allow latching
 	 	_delay_ms(1);
 	 	 // step 9 : deactivate Enable (E = 0)
 	 	M_Dio_void_setPinValue(LCD_EN_PORT, LCD_EN_PIN,LOW);
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	62 e0       	ldi	r22, 0x02	; 2
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	a0 ea       	ldi	r26, 0xA0	; 160
    254a:	b0 e4       	ldi	r27, 0x40	; 64
    254c:	8b 87       	std	Y+11, r24	; 0x0b
    254e:	9c 87       	std	Y+12, r25	; 0x0c
    2550:	ad 87       	std	Y+13, r26	; 0x0d
    2552:	be 87       	std	Y+14, r27	; 0x0e
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2554:	6b 85       	ldd	r22, Y+11	; 0x0b
    2556:	7c 85       	ldd	r23, Y+12	; 0x0c
    2558:	8d 85       	ldd	r24, Y+13	; 0x0d
    255a:	9e 85       	ldd	r25, Y+14	; 0x0e
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	4a e7       	ldi	r20, 0x7A	; 122
    2562:	55 e4       	ldi	r21, 0x45	; 69
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	8f 83       	std	Y+7, r24	; 0x07
    256e:	98 87       	std	Y+8, r25	; 0x08
    2570:	a9 87       	std	Y+9, r26	; 0x09
    2572:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2574:	6f 81       	ldd	r22, Y+7	; 0x07
    2576:	78 85       	ldd	r23, Y+8	; 0x08
    2578:	89 85       	ldd	r24, Y+9	; 0x09
    257a:	9a 85       	ldd	r25, Y+10	; 0x0a
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e8       	ldi	r20, 0x80	; 128
    2582:	5f e3       	ldi	r21, 0x3F	; 63
    2584:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2588:	88 23       	and	r24, r24
    258a:	2c f4       	brge	.+10     	; 0x2596 <H_LCD_void_writeNlatch+0x3e8>
		__ticks = 1;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	3f c0       	rjmp	.+126    	; 0x2614 <H_LCD_void_writeNlatch+0x466>
	else if (__tmp > 65535)
    2596:	6f 81       	ldd	r22, Y+7	; 0x07
    2598:	78 85       	ldd	r23, Y+8	; 0x08
    259a:	89 85       	ldd	r24, Y+9	; 0x09
    259c:	9a 85       	ldd	r25, Y+10	; 0x0a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	3f ef       	ldi	r19, 0xFF	; 255
    25a2:	4f e7       	ldi	r20, 0x7F	; 127
    25a4:	57 e4       	ldi	r21, 0x47	; 71
    25a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	4c f5       	brge	.+82     	; 0x2600 <H_LCD_void_writeNlatch+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e2       	ldi	r20, 0x20	; 32
    25bc:	51 e4       	ldi	r21, 0x41	; 65
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9e 83       	std	Y+6, r25	; 0x06
    25d4:	8d 83       	std	Y+5, r24	; 0x05
    25d6:	0f c0       	rjmp	.+30     	; 0x25f6 <H_LCD_void_writeNlatch+0x448>
    25d8:	80 e9       	ldi	r24, 0x90	; 144
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	9c 83       	std	Y+4, r25	; 0x04
    25de:	8b 83       	std	Y+3, r24	; 0x03
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <H_LCD_void_writeNlatch+0x436>
    25e8:	9c 83       	std	Y+4, r25	; 0x04
    25ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ec:	8d 81       	ldd	r24, Y+5	; 0x05
    25ee:	9e 81       	ldd	r25, Y+6	; 0x06
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	9e 83       	std	Y+6, r25	; 0x06
    25f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	69 f7       	brne	.-38     	; 0x25d8 <H_LCD_void_writeNlatch+0x42a>
    25fe:	14 c0       	rjmp	.+40     	; 0x2628 <H_LCD_void_writeNlatch+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2600:	6f 81       	ldd	r22, Y+7	; 0x07
    2602:	78 85       	ldd	r23, Y+8	; 0x08
    2604:	89 85       	ldd	r24, Y+9	; 0x09
    2606:	9a 85       	ldd	r25, Y+10	; 0x0a
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	9a 83       	std	Y+2, r25	; 0x02
    261a:	89 83       	std	Y+1, r24	; 0x01
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <H_LCD_void_writeNlatch+0x472>
    2624:	9a 83       	std	Y+2, r25	; 0x02
    2626:	89 83       	std	Y+1, r24	; 0x01
 	 	_delay_ms(5);
#else
  #error("Wrong LCD mode")
#endif

}
    2628:	e9 96       	adiw	r28, 0x39	; 57
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	cf 91       	pop	r28
    2636:	df 91       	pop	r29
    2638:	08 95       	ret

0000263a <H_KEYPAD_void_init>:

#include "Keypad_priv.h"
#include "Keypad_config.h"
#include "Keypad_int.h"
void H_KEYPAD_void_init(void)
{
    263a:	df 93       	push	r29
    263c:	cf 93       	push	r28
    263e:	cd b7       	in	r28, 0x3d	; 61
    2640:	de b7       	in	r29, 0x3e	; 62
    // set all rows direction as output
	M_Dio_void_setPinDir(KEYPAD_R0_PORT,KEYPAD_R0_PIN,OUPUT);
    2642:	82 e0       	ldi	r24, 0x02	; 2
    2644:	64 e0       	ldi	r22, 0x04	; 4
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(KEYPAD_R1_PORT,KEYPAD_R1_PIN,OUPUT);
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	65 e0       	ldi	r22, 0x05	; 5
    2650:	41 e0       	ldi	r20, 0x01	; 1
    2652:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(KEYPAD_R2_PORT,KEYPAD_R2_PIN,OUPUT);
    2656:	82 e0       	ldi	r24, 0x02	; 2
    2658:	66 e0       	ldi	r22, 0x06	; 6
    265a:	41 e0       	ldi	r20, 0x01	; 1
    265c:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
	M_Dio_void_setPinDir(KEYPAD_R3_PORT,KEYPAD_R3_PIN,OUPUT);
    2660:	82 e0       	ldi	r24, 0x02	; 2
    2662:	67 e0       	ldi	r22, 0x07	; 7
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>

    // set all coloumns direction as inputs
    M_Dio_void_setPinDir(KEYPAD_C0_PORT,KEYPAD_C0_PIN, INPUT);
    266a:	84 e0       	ldi	r24, 0x04	; 4
    266c:	62 e0       	ldi	r22, 0x02	; 2
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
    M_Dio_void_setPinDir(KEYPAD_C1_PORT,KEYPAD_C1_PIN, INPUT);
    2674:	84 e0       	ldi	r24, 0x04	; 4
    2676:	63 e0       	ldi	r22, 0x03	; 3
    2678:	40 e0       	ldi	r20, 0x00	; 0
    267a:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
    M_Dio_void_setPinDir(KEYPAD_C2_PORT,KEYPAD_C2_PIN, INPUT);
    267e:	84 e0       	ldi	r24, 0x04	; 4
    2680:	64 e0       	ldi	r22, 0x04	; 4
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>
    M_Dio_void_setPinDir(KEYPAD_C3_PORT,KEYPAD_C3_PIN, INPUT);
    2688:	84 e0       	ldi	r24, 0x04	; 4
    268a:	65 e0       	ldi	r22, 0x05	; 5
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 df 07 	call	0xfbe	; 0xfbe <M_Dio_void_setPinDir>

    M_Dio_void_setPinValue(KEYPAD_C0_PORT,KEYPAD_C0_PIN,HIGH);
    2692:	84 e0       	ldi	r24, 0x04	; 4
    2694:	62 e0       	ldi	r22, 0x02	; 2
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_C1_PORT,KEYPAD_C1_PIN,HIGH);
    269c:	84 e0       	ldi	r24, 0x04	; 4
    269e:	63 e0       	ldi	r22, 0x03	; 3
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_C2_PORT,KEYPAD_C2_PIN,HIGH);
    26a6:	84 e0       	ldi	r24, 0x04	; 4
    26a8:	64 e0       	ldi	r22, 0x04	; 4
    26aa:	41 e0       	ldi	r20, 0x01	; 1
    26ac:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_C3_PORT,KEYPAD_C3_PIN,HIGH);
    26b0:	84 e0       	ldi	r24, 0x04	; 4
    26b2:	65 e0       	ldi	r22, 0x05	; 5
    26b4:	41 e0       	ldi	r20, 0x01	; 1
    26b6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>

    // deactivate rows (HIGH)
    M_Dio_void_setPinValue(KEYPAD_R0_PORT,KEYPAD_R0_PIN,HIGH);
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	64 e0       	ldi	r22, 0x04	; 4
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_R1_PORT,KEYPAD_R1_PIN,HIGH);
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	65 e0       	ldi	r22, 0x05	; 5
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_R2_PORT,KEYPAD_R2_PIN,HIGH);
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	66 e0       	ldi	r22, 0x06	; 6
    26d2:	41 e0       	ldi	r20, 0x01	; 1
    26d4:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    M_Dio_void_setPinValue(KEYPAD_R3_PORT,KEYPAD_R3_PIN,HIGH);
    26d8:	82 e0       	ldi	r24, 0x02	; 2
    26da:	67 e0       	ldi	r22, 0x07	; 7
    26dc:	41 e0       	ldi	r20, 0x01	; 1
    26de:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
#if(KEYPAD_TYPE == KEYPAD_TYPE_SIM)
    M_Dio_void_setPinValue(KEYPAD_C0_PORT,KEYPAD_C0_PIN, HIGH);
    26e2:	84 e0       	ldi	r24, 0x04	; 4
    26e4:	62 e0       	ldi	r22, 0x02	; 2
    26e6:	41 e0       	ldi	r20, 0x01	; 1
    26e8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(KEYPAD_C1_PORT,KEYPAD_C1_PIN, HIGH);
    26ec:	84 e0       	ldi	r24, 0x04	; 4
    26ee:	63 e0       	ldi	r22, 0x03	; 3
    26f0:	41 e0       	ldi	r20, 0x01	; 1
    26f2:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(KEYPAD_C2_PORT,KEYPAD_C2_PIN, HIGH);
    26f6:	84 e0       	ldi	r24, 0x04	; 4
    26f8:	64 e0       	ldi	r22, 0x04	; 4
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	M_Dio_void_setPinValue(KEYPAD_C3_PORT,KEYPAD_C3_PIN, HIGH);
    2700:	84 e0       	ldi	r24, 0x04	; 4
    2702:	65 e0       	ldi	r22, 0x05	; 5
    2704:	41 e0       	ldi	r20, 0x01	; 1
    2706:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
#endif
}
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <H_KEYPAD_u8_getPressesKey>:

u8  H_KEYPAD_u8_getPressesKey(void)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	cd b7       	in	r28, 0x3d	; 61
    2716:	de b7       	in	r29, 0x3e	; 62
    2718:	a8 97       	sbiw	r28, 0x28	; 40
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
	 u8 Loc_key = NO_PRESSED_KEY;
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	89 8b       	std	Y+17, r24	; 0x11
	 u8 Loc_row_indx;
	 u8 Loc_col_indx;
	 u8 Loc_KEYPAD_ARR [4][4]= KEYPAD_ARR_MAP;
    2728:	ce 01       	movw	r24, r28
    272a:	42 96       	adiw	r24, 0x12	; 18
    272c:	9d a3       	std	Y+37, r25	; 0x25
    272e:	8c a3       	std	Y+36, r24	; 0x24
    2730:	e3 ee       	ldi	r30, 0xE3	; 227
    2732:	f1 e0       	ldi	r31, 0x01	; 1
    2734:	ff a3       	std	Y+39, r31	; 0x27
    2736:	ee a3       	std	Y+38, r30	; 0x26
    2738:	f0 e1       	ldi	r31, 0x10	; 16
    273a:	f8 a7       	std	Y+40, r31	; 0x28
    273c:	ee a1       	ldd	r30, Y+38	; 0x26
    273e:	ff a1       	ldd	r31, Y+39	; 0x27
    2740:	00 80       	ld	r0, Z
    2742:	8e a1       	ldd	r24, Y+38	; 0x26
    2744:	9f a1       	ldd	r25, Y+39	; 0x27
    2746:	01 96       	adiw	r24, 0x01	; 1
    2748:	9f a3       	std	Y+39, r25	; 0x27
    274a:	8e a3       	std	Y+38, r24	; 0x26
    274c:	ec a1       	ldd	r30, Y+36	; 0x24
    274e:	fd a1       	ldd	r31, Y+37	; 0x25
    2750:	00 82       	st	Z, r0
    2752:	8c a1       	ldd	r24, Y+36	; 0x24
    2754:	9d a1       	ldd	r25, Y+37	; 0x25
    2756:	01 96       	adiw	r24, 0x01	; 1
    2758:	9d a3       	std	Y+37, r25	; 0x25
    275a:	8c a3       	std	Y+36, r24	; 0x24
    275c:	98 a5       	ldd	r25, Y+40	; 0x28
    275e:	91 50       	subi	r25, 0x01	; 1
    2760:	98 a7       	std	Y+40, r25	; 0x28
    2762:	e8 a5       	ldd	r30, Y+40	; 0x28
    2764:	ee 23       	and	r30, r30
    2766:	51 f7       	brne	.-44     	; 0x273c <H_KEYPAD_u8_getPressesKey+0x2c>
	 u8 read;

     for(Loc_row_indx = KEYPAD_R0_PIN ; Loc_row_indx<= KEYPAD_R3_PIN  ; Loc_row_indx++)
    2768:	84 e0       	ldi	r24, 0x04	; 4
    276a:	88 8b       	std	Y+16, r24	; 0x10
    276c:	c9 c0       	rjmp	.+402    	; 0x2900 <H_KEYPAD_u8_getPressesKey+0x1f0>
     {
    	 // Activate row (LOW)
    	 M_Dio_void_setPinValue(KEYPAD_ROWS_PORT,Loc_row_indx,LOW);
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	68 89       	ldd	r22, Y+16	; 0x10
    2772:	40 e0       	ldi	r20, 0x00	; 0
    2774:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
    	 for(Loc_col_indx= KEYPAD_C0_PIN ;Loc_col_indx<= KEYPAD_C3_PIN ; Loc_col_indx++)
    2778:	82 e0       	ldi	r24, 0x02	; 2
    277a:	8f 87       	std	Y+15, r24	; 0x0f
    277c:	b5 c0       	rjmp	.+362    	; 0x28e8 <H_KEYPAD_u8_getPressesKey+0x1d8>
    	 {
    		 // get 1st reading
             M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
    277e:	9e 01       	movw	r18, r28
    2780:	2e 5d       	subi	r18, 0xDE	; 222
    2782:	3f 4f       	sbci	r19, 0xFF	; 255
    2784:	84 e0       	ldi	r24, 0x04	; 4
    2786:	6f 85       	ldd	r22, Y+15	; 0x0f
    2788:	a9 01       	movw	r20, r18
    278a:	0e 94 0e 0a 	call	0x141c	; 0x141c <M_Dio_void_getPinValue>
             if(read == ACTIVE_LOW_PRESSED)
    278e:	8a a1       	ldd	r24, Y+34	; 0x22
    2790:	88 23       	and	r24, r24
    2792:	09 f0       	breq	.+2      	; 0x2796 <H_KEYPAD_u8_getPressesKey+0x86>
    2794:	a6 c0       	rjmp	.+332    	; 0x28e2 <H_KEYPAD_u8_getPressesKey+0x1d2>
    2796:	80 e0       	ldi	r24, 0x00	; 0
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	a8 ec       	ldi	r26, 0xC8	; 200
    279c:	b2 e4       	ldi	r27, 0x42	; 66
    279e:	8b 87       	std	Y+11, r24	; 0x0b
    27a0:	9c 87       	std	Y+12, r25	; 0x0c
    27a2:	ad 87       	std	Y+13, r26	; 0x0d
    27a4:	be 87       	std	Y+14, r27	; 0x0e
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4a e7       	ldi	r20, 0x7A	; 122
    27b4:	55 e4       	ldi	r21, 0x45	; 69
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	8f 83       	std	Y+7, r24	; 0x07
    27c0:	98 87       	std	Y+8, r25	; 0x08
    27c2:	a9 87       	std	Y+9, r26	; 0x09
    27c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27c6:	6f 81       	ldd	r22, Y+7	; 0x07
    27c8:	78 85       	ldd	r23, Y+8	; 0x08
    27ca:	89 85       	ldd	r24, Y+9	; 0x09
    27cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	2c f4       	brge	.+10     	; 0x27e8 <H_KEYPAD_u8_getPressesKey+0xd8>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	3f c0       	rjmp	.+126    	; 0x2866 <H_KEYPAD_u8_getPressesKey+0x156>
	else if (__tmp > 65535)
    27e8:	6f 81       	ldd	r22, Y+7	; 0x07
    27ea:	78 85       	ldd	r23, Y+8	; 0x08
    27ec:	89 85       	ldd	r24, Y+9	; 0x09
    27ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	57 e4       	ldi	r21, 0x47	; 71
    27f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	4c f5       	brge	.+82     	; 0x2852 <H_KEYPAD_u8_getPressesKey+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	6b 85       	ldd	r22, Y+11	; 0x0b
    2802:	7c 85       	ldd	r23, Y+12	; 0x0c
    2804:	8d 85       	ldd	r24, Y+13	; 0x0d
    2806:	9e 85       	ldd	r25, Y+14	; 0x0e
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9e 83       	std	Y+6, r25	; 0x06
    2826:	8d 83       	std	Y+5, r24	; 0x05
    2828:	0f c0       	rjmp	.+30     	; 0x2848 <H_KEYPAD_u8_getPressesKey+0x138>
    282a:	80 e9       	ldi	r24, 0x90	; 144
    282c:	91 e0       	ldi	r25, 0x01	; 1
    282e:	9c 83       	std	Y+4, r25	; 0x04
    2830:	8b 83       	std	Y+3, r24	; 0x03
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <H_KEYPAD_u8_getPressesKey+0x126>
    283a:	9c 83       	std	Y+4, r25	; 0x04
    283c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	8d 81       	ldd	r24, Y+5	; 0x05
    284a:	9e 81       	ldd	r25, Y+6	; 0x06
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f7       	brne	.-38     	; 0x282a <H_KEYPAD_u8_getPressesKey+0x11a>
    2850:	14 c0       	rjmp	.+40     	; 0x287a <H_KEYPAD_u8_getPressesKey+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	9e 83       	std	Y+6, r25	; 0x06
    2864:	8d 83       	std	Y+5, r24	; 0x05
    2866:	8d 81       	ldd	r24, Y+5	; 0x05
    2868:	9e 81       	ldd	r25, Y+6	; 0x06
    286a:	9a 83       	std	Y+2, r25	; 0x02
    286c:	89 83       	std	Y+1, r24	; 0x01
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <H_KEYPAD_u8_getPressesKey+0x162>
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
             {
            	 // debouncing delay
            	 _delay_ms(100);
            	 //get 2nd reading
            	 M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
    287a:	9e 01       	movw	r18, r28
    287c:	2e 5d       	subi	r18, 0xDE	; 222
    287e:	3f 4f       	sbci	r19, 0xFF	; 255
    2880:	84 e0       	ldi	r24, 0x04	; 4
    2882:	6f 85       	ldd	r22, Y+15	; 0x0f
    2884:	a9 01       	movw	r20, r18
    2886:	0e 94 0e 0a 	call	0x141c	; 0x141c <M_Dio_void_getPinValue>
            	 if(read == ACTIVE_LOW_PRESSED)
    288a:	8a a1       	ldd	r24, Y+34	; 0x22
    288c:	88 23       	and	r24, r24
    288e:	49 f5       	brne	.+82     	; 0x28e2 <H_KEYPAD_u8_getPressesKey+0x1d2>
    2890:	08 c0       	rjmp	.+16     	; 0x28a2 <H_KEYPAD_u8_getPressesKey+0x192>
            	 {
            		 // single press only
            		 while(read == ACTIVE_LOW_PRESSED)
            		 {
            			 M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
    2892:	9e 01       	movw	r18, r28
    2894:	2e 5d       	subi	r18, 0xDE	; 222
    2896:	3f 4f       	sbci	r19, 0xFF	; 255
    2898:	84 e0       	ldi	r24, 0x04	; 4
    289a:	6f 85       	ldd	r22, Y+15	; 0x0f
    289c:	a9 01       	movw	r20, r18
    289e:	0e 94 0e 0a 	call	0x141c	; 0x141c <M_Dio_void_getPinValue>
            	 //get 2nd reading
            	 M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
            	 if(read == ACTIVE_LOW_PRESSED)
            	 {
            		 // single press only
            		 while(read == ACTIVE_LOW_PRESSED)
    28a2:	8a a1       	ldd	r24, Y+34	; 0x22
    28a4:	88 23       	and	r24, r24
    28a6:	a9 f3       	breq	.-22     	; 0x2892 <H_KEYPAD_u8_getPressesKey+0x182>
            		 {
            			 M_Dio_void_getPinValue(KEYPAD_COLS_PORT,Loc_col_indx, &read);
            		 }//while
            		 Loc_key = Loc_KEYPAD_ARR[Loc_row_indx - KEYPAD_R0_PIN][Loc_col_indx - KEYPAD_C0_PIN];
    28a8:	88 89       	ldd	r24, Y+16	; 0x10
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	9c 01       	movw	r18, r24
    28b0:	24 50       	subi	r18, 0x04	; 4
    28b2:	30 40       	sbci	r19, 0x00	; 0
    28b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28b6:	88 2f       	mov	r24, r24
    28b8:	90 e0       	ldi	r25, 0x00	; 0
    28ba:	ac 01       	movw	r20, r24
    28bc:	42 50       	subi	r20, 0x02	; 2
    28be:	50 40       	sbci	r21, 0x00	; 0
    28c0:	22 0f       	add	r18, r18
    28c2:	33 1f       	adc	r19, r19
    28c4:	22 0f       	add	r18, r18
    28c6:	33 1f       	adc	r19, r19
    28c8:	ce 01       	movw	r24, r28
    28ca:	01 96       	adiw	r24, 0x01	; 1
    28cc:	82 0f       	add	r24, r18
    28ce:	93 1f       	adc	r25, r19
    28d0:	84 0f       	add	r24, r20
    28d2:	95 1f       	adc	r25, r21
    28d4:	fc 01       	movw	r30, r24
    28d6:	71 96       	adiw	r30, 0x11	; 17
    28d8:	80 81       	ld	r24, Z
    28da:	89 8b       	std	Y+17, r24	; 0x11
            		 return Loc_key;
    28dc:	f9 89       	ldd	r31, Y+17	; 0x11
    28de:	fb a3       	std	Y+35, r31	; 0x23
    28e0:	15 c0       	rjmp	.+42     	; 0x290c <H_KEYPAD_u8_getPressesKey+0x1fc>

     for(Loc_row_indx = KEYPAD_R0_PIN ; Loc_row_indx<= KEYPAD_R3_PIN  ; Loc_row_indx++)
     {
    	 // Activate row (LOW)
    	 M_Dio_void_setPinValue(KEYPAD_ROWS_PORT,Loc_row_indx,LOW);
    	 for(Loc_col_indx= KEYPAD_C0_PIN ;Loc_col_indx<= KEYPAD_C3_PIN ; Loc_col_indx++)
    28e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28e4:	8f 5f       	subi	r24, 0xFF	; 255
    28e6:	8f 87       	std	Y+15, r24	; 0x0f
    28e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ea:	86 30       	cpi	r24, 0x06	; 6
    28ec:	08 f4       	brcc	.+2      	; 0x28f0 <H_KEYPAD_u8_getPressesKey+0x1e0>
    28ee:	47 cf       	rjmp	.-370    	; 0x277e <H_KEYPAD_u8_getPressesKey+0x6e>
            	 }// if 2nd reading

             }// if 1st reading
    	 }// for
    	 // Deactivate row (HIGH )
    	 M_Dio_void_setPinValue(KEYPAD_ROWS_PORT,Loc_row_indx,HIGH);
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	68 89       	ldd	r22, Y+16	; 0x10
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <M_Dio_void_setPinValue>
	 u8 Loc_row_indx;
	 u8 Loc_col_indx;
	 u8 Loc_KEYPAD_ARR [4][4]= KEYPAD_ARR_MAP;
	 u8 read;

     for(Loc_row_indx = KEYPAD_R0_PIN ; Loc_row_indx<= KEYPAD_R3_PIN  ; Loc_row_indx++)
    28fa:	88 89       	ldd	r24, Y+16	; 0x10
    28fc:	8f 5f       	subi	r24, 0xFF	; 255
    28fe:	88 8b       	std	Y+16, r24	; 0x10
    2900:	88 89       	ldd	r24, Y+16	; 0x10
    2902:	88 30       	cpi	r24, 0x08	; 8
    2904:	08 f4       	brcc	.+2      	; 0x2908 <H_KEYPAD_u8_getPressesKey+0x1f8>
    2906:	33 cf       	rjmp	.-410    	; 0x276e <H_KEYPAD_u8_getPressesKey+0x5e>
             }// if 1st reading
    	 }// for
    	 // Deactivate row (HIGH )
    	 M_Dio_void_setPinValue(KEYPAD_ROWS_PORT,Loc_row_indx,HIGH);
     }
     return Loc_key;
    2908:	89 89       	ldd	r24, Y+17	; 0x11
    290a:	8b a3       	std	Y+35, r24	; 0x23
    290c:	8b a1       	ldd	r24, Y+35	; 0x23
}
    290e:	a8 96       	adiw	r28, 0x28	; 40
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <main>:
#include "dc_init.h"



int main ()
{
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
    2928:	62 97       	sbiw	r28, 0x12	; 18
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61


	Init_system(); //to open all system while
    2934:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <Init_system>
	wlcome_screen(); //just repeated only one time
    2938:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <wlcome_screen>

	u8 check = FAIL;
    293c:	18 8a       	std	Y+16, r1	; 0x10
	while(1)
	{


		update_US_read();
    293e:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <update_US_read>


		check = TAKE_action();
    2942:	0e 94 03 16 	call	0x2c06	; 0x2c06 <TAKE_action>
    2946:	88 8b       	std	Y+16, r24	; 0x10
		if(check == FAIL)
    2948:	88 89       	ldd	r24, Y+16	; 0x10
    294a:	88 23       	and	r24, r24
    294c:	29 f4       	brne	.+10     	; 0x2958 <main+0x38>
		{
			H_LCD_void_sendString((const s8*)"OUT OF SYSTEM ");
    294e:	80 e6       	ldi	r24, 0x60	; 96
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
    2956:	a4 c0       	rjmp	.+328    	; 0x2aa0 <main+0x180>
		}
		else if(check == PASS)
    2958:	88 89       	ldd	r24, Y+16	; 0x10
    295a:	81 30       	cpi	r24, 0x01	; 1
    295c:	09 f0       	breq	.+2      	; 0x2960 <main+0x40>
    295e:	a0 c0       	rjmp	.+320    	; 0x2aa0 <main+0x180>
		{
			H_LCD_void_clear();
    2960:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
			H_LCD_void_sendString((const s8*) "1-leds ON ");
    2964:	8f e6       	ldi	r24, 0x6F	; 111
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>

			H_LCD_void_gotXY(1, 0) ;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	0e 94 8e 10 	call	0x211c	; 0x211c <H_LCD_void_gotXY>
			H_LCD_void_sendString((const s8*) "2-leds oFF ");
    2974:	8a e7       	ldi	r24, 0x7A	; 122
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
    297c:	80 e0       	ldi	r24, 0x00	; 0
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	aa e7       	ldi	r26, 0x7A	; 122
    2982:	b4 e4       	ldi	r27, 0x44	; 68
    2984:	8b 87       	std	Y+11, r24	; 0x0b
    2986:	9c 87       	std	Y+12, r25	; 0x0c
    2988:	ad 87       	std	Y+13, r26	; 0x0d
    298a:	be 87       	std	Y+14, r27	; 0x0e
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    298c:	6b 85       	ldd	r22, Y+11	; 0x0b
    298e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2990:	8d 85       	ldd	r24, Y+13	; 0x0d
    2992:	9e 85       	ldd	r25, Y+14	; 0x0e
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4a e7       	ldi	r20, 0x7A	; 122
    299a:	55 e4       	ldi	r21, 0x45	; 69
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	8f 83       	std	Y+7, r24	; 0x07
    29a6:	98 87       	std	Y+8, r25	; 0x08
    29a8:	a9 87       	std	Y+9, r26	; 0x09
    29aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29ac:	6f 81       	ldd	r22, Y+7	; 0x07
    29ae:	78 85       	ldd	r23, Y+8	; 0x08
    29b0:	89 85       	ldd	r24, Y+9	; 0x09
    29b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e8       	ldi	r20, 0x80	; 128
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	2c f4       	brge	.+10     	; 0x29ce <main+0xae>
		__ticks = 1;
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	3f c0       	rjmp	.+126    	; 0x2a4c <main+0x12c>
	else if (__tmp > 65535)
    29ce:	6f 81       	ldd	r22, Y+7	; 0x07
    29d0:	78 85       	ldd	r23, Y+8	; 0x08
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	3f ef       	ldi	r19, 0xFF	; 255
    29da:	4f e7       	ldi	r20, 0x7F	; 127
    29dc:	57 e4       	ldi	r21, 0x47	; 71
    29de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29e2:	18 16       	cp	r1, r24
    29e4:	4c f5       	brge	.+82     	; 0x2a38 <main+0x118>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e2       	ldi	r20, 0x20	; 32
    29f4:	51 e4       	ldi	r21, 0x41	; 65
    29f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9e 83       	std	Y+6, r25	; 0x06
    2a0c:	8d 83       	std	Y+5, r24	; 0x05
    2a0e:	0f c0       	rjmp	.+30     	; 0x2a2e <main+0x10e>
    2a10:	80 e9       	ldi	r24, 0x90	; 144
    2a12:	91 e0       	ldi	r25, 0x01	; 1
    2a14:	9c 83       	std	Y+4, r25	; 0x04
    2a16:	8b 83       	std	Y+3, r24	; 0x03
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1c:	01 97       	sbiw	r24, 0x01	; 1
    2a1e:	f1 f7       	brne	.-4      	; 0x2a1c <main+0xfc>
    2a20:	9c 83       	std	Y+4, r25	; 0x04
    2a22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a24:	8d 81       	ldd	r24, Y+5	; 0x05
    2a26:	9e 81       	ldd	r25, Y+6	; 0x06
    2a28:	01 97       	sbiw	r24, 0x01	; 1
    2a2a:	9e 83       	std	Y+6, r25	; 0x06
    2a2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a30:	9e 81       	ldd	r25, Y+6	; 0x06
    2a32:	00 97       	sbiw	r24, 0x00	; 0
    2a34:	69 f7       	brne	.-38     	; 0x2a10 <main+0xf0>
    2a36:	14 c0       	rjmp	.+40     	; 0x2a60 <main+0x140>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a38:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3a:	78 85       	ldd	r23, Y+8	; 0x08
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a44:	dc 01       	movw	r26, r24
    2a46:	cb 01       	movw	r24, r22
    2a48:	9e 83       	std	Y+6, r25	; 0x06
    2a4a:	8d 83       	std	Y+5, r24	; 0x05
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	9a 81       	ldd	r25, Y+2	; 0x02
    2a58:	01 97       	sbiw	r24, 0x01	; 1
    2a5a:	f1 f7       	brne	.-4      	; 0x2a58 <main+0x138>
    2a5c:	9a 83       	std	Y+2, r25	; 0x02
    2a5e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);

			u8 get_num =NO_PRESSED_KEY ;
    2a60:	8f ef       	ldi	r24, 0xFF	; 255
    2a62:	8f 87       	std	Y+15, r24	; 0x0f
    2a64:	03 c0       	rjmp	.+6      	; 0x2a6c <main+0x14c>
			while(get_num == NO_PRESSED_KEY)
			{
				get_num = H_KEYPAD_u8_getPressesKey();
    2a66:	0e 94 88 13 	call	0x2710	; 0x2710 <H_KEYPAD_u8_getPressesKey>
    2a6a:	8f 87       	std	Y+15, r24	; 0x0f
			H_LCD_void_gotXY(1, 0) ;
			H_LCD_void_sendString((const s8*) "2-leds oFF ");
			_delay_ms(1000);

			u8 get_num =NO_PRESSED_KEY ;
			while(get_num == NO_PRESSED_KEY)
    2a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a6e:	8f 3f       	cpi	r24, 0xFF	; 255
    2a70:	d1 f3       	breq	.-12     	; 0x2a66 <main+0x146>
			{
				get_num = H_KEYPAD_u8_getPressesKey();
			}
			switch(get_num)
    2a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a74:	28 2f       	mov	r18, r24
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	3a 8b       	std	Y+18, r19	; 0x12
    2a7a:	29 8b       	std	Y+17, r18	; 0x11
    2a7c:	89 89       	ldd	r24, Y+17	; 0x11
    2a7e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a80:	81 33       	cpi	r24, 0x31	; 49
    2a82:	91 05       	cpc	r25, r1
    2a84:	31 f0       	breq	.+12     	; 0x2a92 <main+0x172>
    2a86:	29 89       	ldd	r18, Y+17	; 0x11
    2a88:	3a 89       	ldd	r19, Y+18	; 0x12
    2a8a:	22 33       	cpi	r18, 0x32	; 50
    2a8c:	31 05       	cpc	r19, r1
    2a8e:	21 f0       	breq	.+8      	; 0x2a98 <main+0x178>
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <main+0x17c>
			{
			case '1' :

				ALL_LEDS_ON();
    2a92:	0e 94 96 1a 	call	0x352c	; 0x352c <ALL_LEDS_ON>
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <main+0x17c>
				break ;
			case '2' :
				ALL_LEDS_OFF();
    2a98:	0e 94 af 1a 	call	0x355e	; 0x355e <ALL_LEDS_OFF>

				break;

			default: break;
			}
		get_num = NO_PRESSED_KEY;
    2a9c:	8f ef       	ldi	r24, 0xFF	; 255
    2a9e:	8f 87       	std	Y+15, r24	; 0x0f
		}
			H_LCD_void_clear();
    2aa0:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
    2aa4:	4c cf       	rjmp	.-360    	; 0x293e <main+0x1e>

00002aa6 <Init_system>:
u8 pass_arr[MAX_PASS_SIZE] = {'0','0','0','0'};

u16 TEMP_read = 0;

void Init_system(void)
{
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_Init();
    2aae:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <H_LCD_void_Init>
	H_KEYPAD_void_init();
    2ab2:	0e 94 1d 13 	call	0x263a	; 0x263a <H_KEYPAD_void_init>
	M_ADC_void_init();
    2ab6:	0e 94 10 0b 	call	0x1620	; 0x1620 <M_ADC_void_init>
	ultrasonic_vinit(PORTC_ID ,PIN5_ID);
    2aba:	83 e0       	ldi	r24, 0x03	; 3
    2abc:	65 e0       	ldi	r22, 0x05	; 5
    2abe:	0e 94 87 0b 	call	0x170e	; 0x170e <ultrasonic_vinit>
	H_TempSensor_void_Init();
    2ac2:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <H_TempSensor_void_Init>
	H_DcMotor_void_init();
    2ac6:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <H_DcMotor_void_init>
	asm("SEI");
    2aca:	78 94       	sei
}
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <wlcome_screen>:

void wlcome_screen(void)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	2e 97       	sbiw	r28, 0x0e	; 14
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61

	H_LCD_void_sendString((const s8*)"welcome ");
    2ae6:	86 e8       	ldi	r24, 0x86	; 134
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	90 e0       	ldi	r25, 0x00	; 0
    2af2:	aa e7       	ldi	r26, 0x7A	; 122
    2af4:	b4 e4       	ldi	r27, 0x44	; 68
    2af6:	8b 87       	std	Y+11, r24	; 0x0b
    2af8:	9c 87       	std	Y+12, r25	; 0x0c
    2afa:	ad 87       	std	Y+13, r26	; 0x0d
    2afc:	be 87       	std	Y+14, r27	; 0x0e
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a e7       	ldi	r20, 0x7A	; 122
    2b0c:	55 e4       	ldi	r21, 0x45	; 69
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	8f 83       	std	Y+7, r24	; 0x07
    2b18:	98 87       	std	Y+8, r25	; 0x08
    2b1a:	a9 87       	std	Y+9, r26	; 0x09
    2b1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b20:	78 85       	ldd	r23, Y+8	; 0x08
    2b22:	89 85       	ldd	r24, Y+9	; 0x09
    2b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <wlcome_screen+0x6e>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9e 83       	std	Y+6, r25	; 0x06
    2b3c:	8d 83       	std	Y+5, r24	; 0x05
    2b3e:	3f c0       	rjmp	.+126    	; 0x2bbe <wlcome_screen+0xec>
	else if (__tmp > 65535)
    2b40:	6f 81       	ldd	r22, Y+7	; 0x07
    2b42:	78 85       	ldd	r23, Y+8	; 0x08
    2b44:	89 85       	ldd	r24, Y+9	; 0x09
    2b46:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	4c f5       	brge	.+82     	; 0x2baa <wlcome_screen+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <wlcome_screen+0xce>
    2b82:	80 e9       	ldi	r24, 0x90	; 144
    2b84:	91 e0       	ldi	r25, 0x01	; 1
    2b86:	9c 83       	std	Y+4, r25	; 0x04
    2b88:	8b 83       	std	Y+3, r24	; 0x03
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <wlcome_screen+0xbc>
    2b92:	9c 83       	std	Y+4, r25	; 0x04
    2b94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	8d 81       	ldd	r24, Y+5	; 0x05
    2b98:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9e 83       	std	Y+6, r25	; 0x06
    2b9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <wlcome_screen+0xb0>
    2ba8:	14 c0       	rjmp	.+40     	; 0x2bd2 <wlcome_screen+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	6f 81       	ldd	r22, Y+7	; 0x07
    2bac:	78 85       	ldd	r23, Y+8	; 0x08
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9e 83       	std	Y+6, r25	; 0x06
    2bbc:	8d 83       	std	Y+5, r24	; 0x05
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	9a 83       	std	Y+2, r25	; 0x02
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	89 81       	ldd	r24, Y+1	; 0x01
    2bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <wlcome_screen+0xf8>
    2bce:	9a 83       	std	Y+2, r25	; 0x02
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	H_LCD_void_clear();
    2bd2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
}
    2bd6:	2e 96       	adiw	r28, 0x0e	; 14
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
    2be2:	cf 91       	pop	r28
    2be4:	df 91       	pop	r29
    2be6:	08 95       	ret

00002be8 <update_US_read>:

void update_US_read(void)  //ultra sonic to get read
{
    2be8:	df 93       	push	r29
    2bea:	cf 93       	push	r28
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
	distance = ultrasonic_u16distance(PORTC_ID ,PIN5_ID);
    2bf0:	83 e0       	ldi	r24, 0x03	; 3
    2bf2:	65 e0       	ldi	r22, 0x05	; 5
    2bf4:	0e 94 98 0b 	call	0x1730	; 0x1730 <ultrasonic_u16distance>
    2bf8:	90 93 f5 01 	sts	0x01F5, r25
    2bfc:	80 93 f4 01 	sts	0x01F4, r24

}
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <TAKE_action>:

u8 TAKE_action(void)
{
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	df 93       	push	r29
    2c0c:	cf 93       	push	r28
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	ca 54       	subi	r28, 0x4A	; 74
    2c14:	d0 40       	sbci	r29, 0x00	; 0
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
	u8 check = FAIL;
    2c20:	fe 01       	movw	r30, r28
    2c22:	e7 5b       	subi	r30, 0xB7	; 183
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	10 82       	st	Z, r1
	if(distance < 15)
    2c28:	80 91 f4 01 	lds	r24, 0x01F4
    2c2c:	90 91 f5 01 	lds	r25, 0x01F5
    2c30:	8f 30       	cpi	r24, 0x0F	; 15
    2c32:	91 05       	cpc	r25, r1
    2c34:	08 f0       	brcs	.+2      	; 0x2c38 <TAKE_action+0x32>
    2c36:	55 c2       	rjmp	.+1194   	; 0x30e2 <TAKE_action+0x4dc>
	{

		H_LCD_void_sendString((const s8 *)"PLEASE ENTER THE ");
    2c38:	8f e8       	ldi	r24, 0x8F	; 143
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
		H_LCD_void_gotXY(1, 4);
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	64 e0       	ldi	r22, 0x04	; 4
    2c44:	0e 94 8e 10 	call	0x211c	; 0x211c <H_LCD_void_gotXY>
		H_LCD_void_sendString((const s8 *)"PASSWORD");
    2c48:	81 ea       	ldi	r24, 0xA1	; 161
    2c4a:	90 e0       	ldi	r25, 0x00	; 0
    2c4c:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
    2c50:	fe 01       	movw	r30, r28
    2c52:	ed 5b       	subi	r30, 0xBD	; 189
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	aa e7       	ldi	r26, 0x7A	; 122
    2c5c:	b4 e4       	ldi	r27, 0x44	; 68
    2c5e:	80 83       	st	Z, r24
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	a2 83       	std	Z+2, r26	; 0x02
    2c64:	b3 83       	std	Z+3, r27	; 0x03
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c66:	8e 01       	movw	r16, r28
    2c68:	01 5c       	subi	r16, 0xC1	; 193
    2c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c6c:	fe 01       	movw	r30, r28
    2c6e:	ed 5b       	subi	r30, 0xBD	; 189
    2c70:	ff 4f       	sbci	r31, 0xFF	; 255
    2c72:	60 81       	ld	r22, Z
    2c74:	71 81       	ldd	r23, Z+1	; 0x01
    2c76:	82 81       	ldd	r24, Z+2	; 0x02
    2c78:	93 81       	ldd	r25, Z+3	; 0x03
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	4a e7       	ldi	r20, 0x7A	; 122
    2c80:	55 e4       	ldi	r21, 0x45	; 69
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	f8 01       	movw	r30, r16
    2c8c:	80 83       	st	Z, r24
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	a2 83       	std	Z+2, r26	; 0x02
    2c92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c94:	fe 01       	movw	r30, r28
    2c96:	ff 96       	adiw	r30, 0x3f	; 63
    2c98:	60 81       	ld	r22, Z
    2c9a:	71 81       	ldd	r23, Z+1	; 0x01
    2c9c:	82 81       	ldd	r24, Z+2	; 0x02
    2c9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ca0:	20 e0       	ldi	r18, 0x00	; 0
    2ca2:	30 e0       	ldi	r19, 0x00	; 0
    2ca4:	40 e8       	ldi	r20, 0x80	; 128
    2ca6:	5f e3       	ldi	r21, 0x3F	; 63
    2ca8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cac:	88 23       	and	r24, r24
    2cae:	2c f4       	brge	.+10     	; 0x2cba <TAKE_action+0xb4>
		__ticks = 1;
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	9e af       	std	Y+62, r25	; 0x3e
    2cb6:	8d af       	std	Y+61, r24	; 0x3d
    2cb8:	46 c0       	rjmp	.+140    	; 0x2d46 <TAKE_action+0x140>
	else if (__tmp > 65535)
    2cba:	fe 01       	movw	r30, r28
    2cbc:	ff 96       	adiw	r30, 0x3f	; 63
    2cbe:	60 81       	ld	r22, Z
    2cc0:	71 81       	ldd	r23, Z+1	; 0x01
    2cc2:	82 81       	ldd	r24, Z+2	; 0x02
    2cc4:	93 81       	ldd	r25, Z+3	; 0x03
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	3f ef       	ldi	r19, 0xFF	; 255
    2cca:	4f e7       	ldi	r20, 0x7F	; 127
    2ccc:	57 e4       	ldi	r21, 0x47	; 71
    2cce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cd2:	18 16       	cp	r1, r24
    2cd4:	64 f5       	brge	.+88     	; 0x2d2e <TAKE_action+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd6:	fe 01       	movw	r30, r28
    2cd8:	ed 5b       	subi	r30, 0xBD	; 189
    2cda:	ff 4f       	sbci	r31, 0xFF	; 255
    2cdc:	60 81       	ld	r22, Z
    2cde:	71 81       	ldd	r23, Z+1	; 0x01
    2ce0:	82 81       	ldd	r24, Z+2	; 0x02
    2ce2:	93 81       	ldd	r25, Z+3	; 0x03
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	40 e2       	ldi	r20, 0x20	; 32
    2cea:	51 e4       	ldi	r21, 0x41	; 65
    2cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	bc 01       	movw	r22, r24
    2cf6:	cd 01       	movw	r24, r26
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9e af       	std	Y+62, r25	; 0x3e
    2d02:	8d af       	std	Y+61, r24	; 0x3d
    2d04:	0f c0       	rjmp	.+30     	; 0x2d24 <TAKE_action+0x11e>
    2d06:	80 e9       	ldi	r24, 0x90	; 144
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	9c af       	std	Y+60, r25	; 0x3c
    2d0c:	8b af       	std	Y+59, r24	; 0x3b
    2d0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d10:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <TAKE_action+0x10c>
    2d16:	9c af       	std	Y+60, r25	; 0x3c
    2d18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d1c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	9e af       	std	Y+62, r25	; 0x3e
    2d22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d24:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d26:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d28:	00 97       	sbiw	r24, 0x00	; 0
    2d2a:	69 f7       	brne	.-38     	; 0x2d06 <TAKE_action+0x100>
    2d2c:	16 c0       	rjmp	.+44     	; 0x2d5a <TAKE_action+0x154>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ff 96       	adiw	r30, 0x3f	; 63
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	93 81       	ldd	r25, Z+3	; 0x03
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9e af       	std	Y+62, r25	; 0x3e
    2d44:	8d af       	std	Y+61, r24	; 0x3d
    2d46:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d48:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d4a:	9a af       	std	Y+58, r25	; 0x3a
    2d4c:	89 af       	std	Y+57, r24	; 0x39
    2d4e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d50:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d52:	01 97       	sbiw	r24, 0x01	; 1
    2d54:	f1 f7       	brne	.-4      	; 0x2d52 <TAKE_action+0x14c>
    2d56:	9a af       	std	Y+58, r25	; 0x3a
    2d58:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1000);
		H_LCD_void_clear();
    2d5a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
		u8 trys = MAX_TRYS;
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e8 5b       	subi	r30, 0xB8	; 184
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	80 83       	st	Z, r24
		do
		{
			check = get_and_check_password();
    2d68:	0e 94 47 19 	call	0x328e	; 0x328e <get_and_check_password>
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e7 5b       	subi	r30, 0xB7	; 183
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 83       	st	Z, r24


			if(check == FAIL)
    2d74:	fe 01       	movw	r30, r28
    2d76:	e7 5b       	subi	r30, 0xB7	; 183
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	80 81       	ld	r24, Z
    2d7c:	88 23       	and	r24, r24
    2d7e:	09 f0       	breq	.+2      	; 0x2d82 <TAKE_action+0x17c>
    2d80:	9a c1       	rjmp	.+820    	; 0x30b6 <TAKE_action+0x4b0>
			{
				H_LCD_void_clear();
    2d82:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
				H_LCD_void_sendString((const s8 *)"try again");
    2d86:	8a ea       	ldi	r24, 0xAA	; 170
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	aa e7       	ldi	r26, 0x7A	; 122
    2d94:	b4 e4       	ldi	r27, 0x44	; 68
    2d96:	8d ab       	std	Y+53, r24	; 0x35
    2d98:	9e ab       	std	Y+54, r25	; 0x36
    2d9a:	af ab       	std	Y+55, r26	; 0x37
    2d9c:	b8 af       	std	Y+56, r27	; 0x38
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9e:	6d a9       	ldd	r22, Y+53	; 0x35
    2da0:	7e a9       	ldd	r23, Y+54	; 0x36
    2da2:	8f a9       	ldd	r24, Y+55	; 0x37
    2da4:	98 ad       	ldd	r25, Y+56	; 0x38
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a e7       	ldi	r20, 0x7A	; 122
    2dac:	55 e4       	ldi	r21, 0x45	; 69
    2dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	89 ab       	std	Y+49, r24	; 0x31
    2db8:	9a ab       	std	Y+50, r25	; 0x32
    2dba:	ab ab       	std	Y+51, r26	; 0x33
    2dbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dd2:	88 23       	and	r24, r24
    2dd4:	2c f4       	brge	.+10     	; 0x2de0 <TAKE_action+0x1da>
		__ticks = 1;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	98 ab       	std	Y+48, r25	; 0x30
    2ddc:	8f a7       	std	Y+47, r24	; 0x2f
    2dde:	3f c0       	rjmp	.+126    	; 0x2e5e <TAKE_action+0x258>
	else if (__tmp > 65535)
    2de0:	69 a9       	ldd	r22, Y+49	; 0x31
    2de2:	7a a9       	ldd	r23, Y+50	; 0x32
    2de4:	8b a9       	ldd	r24, Y+51	; 0x33
    2de6:	9c a9       	ldd	r25, Y+52	; 0x34
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	3f ef       	ldi	r19, 0xFF	; 255
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	57 e4       	ldi	r21, 0x47	; 71
    2df0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2df4:	18 16       	cp	r1, r24
    2df6:	4c f5       	brge	.+82     	; 0x2e4a <TAKE_action+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dfa:	7e a9       	ldd	r23, Y+54	; 0x36
    2dfc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dfe:	98 ad       	ldd	r25, Y+56	; 0x38
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e2       	ldi	r20, 0x20	; 32
    2e06:	51 e4       	ldi	r21, 0x41	; 65
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	98 ab       	std	Y+48, r25	; 0x30
    2e1e:	8f a7       	std	Y+47, r24	; 0x2f
    2e20:	0f c0       	rjmp	.+30     	; 0x2e40 <TAKE_action+0x23a>
    2e22:	80 e9       	ldi	r24, 0x90	; 144
    2e24:	91 e0       	ldi	r25, 0x01	; 1
    2e26:	9e a7       	std	Y+46, r25	; 0x2e
    2e28:	8d a7       	std	Y+45, r24	; 0x2d
    2e2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <TAKE_action+0x228>
    2e32:	9e a7       	std	Y+46, r25	; 0x2e
    2e34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e38:	98 a9       	ldd	r25, Y+48	; 0x30
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	98 ab       	std	Y+48, r25	; 0x30
    2e3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e42:	98 a9       	ldd	r25, Y+48	; 0x30
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	69 f7       	brne	.-38     	; 0x2e22 <TAKE_action+0x21c>
    2e48:	14 c0       	rjmp	.+40     	; 0x2e72 <TAKE_action+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e50:	9c a9       	ldd	r25, Y+52	; 0x34
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	98 ab       	std	Y+48, r25	; 0x30
    2e5c:	8f a7       	std	Y+47, r24	; 0x2f
    2e5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e60:	98 a9       	ldd	r25, Y+48	; 0x30
    2e62:	9c a7       	std	Y+44, r25	; 0x2c
    2e64:	8b a7       	std	Y+43, r24	; 0x2b
    2e66:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e68:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <TAKE_action+0x264>
    2e6e:	9c a7       	std	Y+44, r25	; 0x2c
    2e70:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				H_LCD_void_clear();
    2e72:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
				trys--;
    2e76:	de 01       	movw	r26, r28
    2e78:	a8 5b       	subi	r26, 0xB8	; 184
    2e7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e7c:	fe 01       	movw	r30, r28
    2e7e:	e8 5b       	subi	r30, 0xB8	; 184
    2e80:	ff 4f       	sbci	r31, 0xFF	; 255
    2e82:	80 81       	ld	r24, Z
    2e84:	81 50       	subi	r24, 0x01	; 1
    2e86:	8c 93       	st	X, r24
				if(trys==0)
    2e88:	fe 01       	movw	r30, r28
    2e8a:	e8 5b       	subi	r30, 0xB8	; 184
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 23       	and	r24, r24
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <TAKE_action+0x290>
    2e94:	10 c1       	rjmp	.+544    	; 0x30b6 <TAKE_action+0x4b0>
				{
					H_LCD_void_clear();
    2e96:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
					H_LCD_void_sendString((const s8 *)"max attempt");
    2e9a:	84 eb       	ldi	r24, 0xB4	; 180
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>

					u8 i=0 ;
    2ea2:	fe 01       	movw	r30, r28
    2ea4:	e9 5b       	subi	r30, 0xB9	; 185
    2ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea8:	10 82       	st	Z, r1

					for(i=0 ; i < 10;i++ )
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e9 5b       	subi	r30, 0xB9	; 185
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	10 82       	st	Z, r1
    2eb2:	80 c0       	rjmp	.+256    	; 0x2fb4 <TAKE_action+0x3ae>
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	aa e7       	ldi	r26, 0x7A	; 122
    2eba:	b4 e4       	ldi	r27, 0x44	; 68
    2ebc:	8f a3       	std	Y+39, r24	; 0x27
    2ebe:	98 a7       	std	Y+40, r25	; 0x28
    2ec0:	a9 a7       	std	Y+41, r26	; 0x29
    2ec2:	ba a7       	std	Y+42, r27	; 0x2a
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ec4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ec6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ec8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eca:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	4a e7       	ldi	r20, 0x7A	; 122
    2ed2:	55 e4       	ldi	r21, 0x45	; 69
    2ed4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed8:	dc 01       	movw	r26, r24
    2eda:	cb 01       	movw	r24, r22
    2edc:	8b a3       	std	Y+35, r24	; 0x23
    2ede:	9c a3       	std	Y+36, r25	; 0x24
    2ee0:	ad a3       	std	Y+37, r26	; 0x25
    2ee2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ee4:	6b a1       	ldd	r22, Y+35	; 0x23
    2ee6:	7c a1       	ldd	r23, Y+36	; 0x24
    2ee8:	8d a1       	ldd	r24, Y+37	; 0x25
    2eea:	9e a1       	ldd	r25, Y+38	; 0x26
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	40 e8       	ldi	r20, 0x80	; 128
    2ef2:	5f e3       	ldi	r21, 0x3F	; 63
    2ef4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ef8:	88 23       	and	r24, r24
    2efa:	2c f4       	brge	.+10     	; 0x2f06 <TAKE_action+0x300>
		__ticks = 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	9a a3       	std	Y+34, r25	; 0x22
    2f02:	89 a3       	std	Y+33, r24	; 0x21
    2f04:	3f c0       	rjmp	.+126    	; 0x2f84 <TAKE_action+0x37e>
	else if (__tmp > 65535)
    2f06:	6b a1       	ldd	r22, Y+35	; 0x23
    2f08:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	3f ef       	ldi	r19, 0xFF	; 255
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	57 e4       	ldi	r21, 0x47	; 71
    2f16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f1a:	18 16       	cp	r1, r24
    2f1c:	4c f5       	brge	.+82     	; 0x2f70 <TAKE_action+0x36a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f1e:	6f a1       	ldd	r22, Y+39	; 0x27
    2f20:	78 a5       	ldd	r23, Y+40	; 0x28
    2f22:	89 a5       	ldd	r24, Y+41	; 0x29
    2f24:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e2       	ldi	r20, 0x20	; 32
    2f2c:	51 e4       	ldi	r21, 0x41	; 65
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	bc 01       	movw	r22, r24
    2f38:	cd 01       	movw	r24, r26
    2f3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	9a a3       	std	Y+34, r25	; 0x22
    2f44:	89 a3       	std	Y+33, r24	; 0x21
    2f46:	0f c0       	rjmp	.+30     	; 0x2f66 <TAKE_action+0x360>
    2f48:	80 e9       	ldi	r24, 0x90	; 144
    2f4a:	91 e0       	ldi	r25, 0x01	; 1
    2f4c:	98 a3       	std	Y+32, r25	; 0x20
    2f4e:	8f 8f       	std	Y+31, r24	; 0x1f
    2f50:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f52:	98 a1       	ldd	r25, Y+32	; 0x20
    2f54:	01 97       	sbiw	r24, 0x01	; 1
    2f56:	f1 f7       	brne	.-4      	; 0x2f54 <TAKE_action+0x34e>
    2f58:	98 a3       	std	Y+32, r25	; 0x20
    2f5a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	9a a3       	std	Y+34, r25	; 0x22
    2f64:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f66:	89 a1       	ldd	r24, Y+33	; 0x21
    2f68:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6a:	00 97       	sbiw	r24, 0x00	; 0
    2f6c:	69 f7       	brne	.-38     	; 0x2f48 <TAKE_action+0x342>
    2f6e:	14 c0       	rjmp	.+40     	; 0x2f98 <TAKE_action+0x392>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f70:	6b a1       	ldd	r22, Y+35	; 0x23
    2f72:	7c a1       	ldd	r23, Y+36	; 0x24
    2f74:	8d a1       	ldd	r24, Y+37	; 0x25
    2f76:	9e a1       	ldd	r25, Y+38	; 0x26
    2f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9a a3       	std	Y+34, r25	; 0x22
    2f82:	89 a3       	std	Y+33, r24	; 0x21
    2f84:	89 a1       	ldd	r24, Y+33	; 0x21
    2f86:	9a a1       	ldd	r25, Y+34	; 0x22
    2f88:	9e 8f       	std	Y+30, r25	; 0x1e
    2f8a:	8d 8f       	std	Y+29, r24	; 0x1d
    2f8c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f8e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <TAKE_action+0x38a>
    2f94:	9e 8f       	std	Y+30, r25	; 0x1e
    2f96:	8d 8f       	std	Y+29, r24	; 0x1d
					{
						_delay_ms(1000);
						trys = MAX_TRYS;
    2f98:	fe 01       	movw	r30, r28
    2f9a:	e8 5b       	subi	r30, 0xB8	; 184
    2f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9e:	83 e0       	ldi	r24, 0x03	; 3
    2fa0:	80 83       	st	Z, r24
					H_LCD_void_clear();
					H_LCD_void_sendString((const s8 *)"max attempt");

					u8 i=0 ;

					for(i=0 ; i < 10;i++ )
    2fa2:	de 01       	movw	r26, r28
    2fa4:	a9 5b       	subi	r26, 0xB9	; 185
    2fa6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fa8:	fe 01       	movw	r30, r28
    2faa:	e9 5b       	subi	r30, 0xB9	; 185
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 81       	ld	r24, Z
    2fb0:	8f 5f       	subi	r24, 0xFF	; 255
    2fb2:	8c 93       	st	X, r24
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	e9 5b       	subi	r30, 0xB9	; 185
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	80 81       	ld	r24, Z
    2fbc:	8a 30       	cpi	r24, 0x0A	; 10
    2fbe:	08 f4       	brcc	.+2      	; 0x2fc2 <TAKE_action+0x3bc>
    2fc0:	79 cf       	rjmp	.-270    	; 0x2eb4 <TAKE_action+0x2ae>
					{
						_delay_ms(1000);
						trys = MAX_TRYS;
					}
					H_LCD_void_clear();
    2fc2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
					H_LCD_void_sendString((const s8 *)"try again");
    2fc6:	8a ea       	ldi	r24, 0xAA	; 170
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	aa e7       	ldi	r26, 0x7A	; 122
    2fd4:	b4 e4       	ldi	r27, 0x44	; 68
    2fd6:	89 8f       	std	Y+25, r24	; 0x19
    2fd8:	9a 8f       	std	Y+26, r25	; 0x1a
    2fda:	ab 8f       	std	Y+27, r26	; 0x1b
    2fdc:	bc 8f       	std	Y+28, r27	; 0x1c
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fde:	69 8d       	ldd	r22, Y+25	; 0x19
    2fe0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fe2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fe4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fe6:	20 e0       	ldi	r18, 0x00	; 0
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	4a e7       	ldi	r20, 0x7A	; 122
    2fec:	55 e4       	ldi	r21, 0x45	; 69
    2fee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	8d 8b       	std	Y+21, r24	; 0x15
    2ff8:	9e 8b       	std	Y+22, r25	; 0x16
    2ffa:	af 8b       	std	Y+23, r26	; 0x17
    2ffc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    3000:	7e 89       	ldd	r23, Y+22	; 0x16
    3002:	8f 89       	ldd	r24, Y+23	; 0x17
    3004:	98 8d       	ldd	r25, Y+24	; 0x18
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e8       	ldi	r20, 0x80	; 128
    300c:	5f e3       	ldi	r21, 0x3F	; 63
    300e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3012:	88 23       	and	r24, r24
    3014:	2c f4       	brge	.+10     	; 0x3020 <TAKE_action+0x41a>
		__ticks = 1;
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	9c 8b       	std	Y+20, r25	; 0x14
    301c:	8b 8b       	std	Y+19, r24	; 0x13
    301e:	3f c0       	rjmp	.+126    	; 0x309e <TAKE_action+0x498>
	else if (__tmp > 65535)
    3020:	6d 89       	ldd	r22, Y+21	; 0x15
    3022:	7e 89       	ldd	r23, Y+22	; 0x16
    3024:	8f 89       	ldd	r24, Y+23	; 0x17
    3026:	98 8d       	ldd	r25, Y+24	; 0x18
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	3f ef       	ldi	r19, 0xFF	; 255
    302c:	4f e7       	ldi	r20, 0x7F	; 127
    302e:	57 e4       	ldi	r21, 0x47	; 71
    3030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3034:	18 16       	cp	r1, r24
    3036:	4c f5       	brge	.+82     	; 0x308a <TAKE_action+0x484>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3038:	69 8d       	ldd	r22, Y+25	; 0x19
    303a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    303c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    303e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	40 e2       	ldi	r20, 0x20	; 32
    3046:	51 e4       	ldi	r21, 0x41	; 65
    3048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	bc 01       	movw	r22, r24
    3052:	cd 01       	movw	r24, r26
    3054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	9c 8b       	std	Y+20, r25	; 0x14
    305e:	8b 8b       	std	Y+19, r24	; 0x13
    3060:	0f c0       	rjmp	.+30     	; 0x3080 <TAKE_action+0x47a>
    3062:	80 e9       	ldi	r24, 0x90	; 144
    3064:	91 e0       	ldi	r25, 0x01	; 1
    3066:	9a 8b       	std	Y+18, r25	; 0x12
    3068:	89 8b       	std	Y+17, r24	; 0x11
    306a:	89 89       	ldd	r24, Y+17	; 0x11
    306c:	9a 89       	ldd	r25, Y+18	; 0x12
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	f1 f7       	brne	.-4      	; 0x306e <TAKE_action+0x468>
    3072:	9a 8b       	std	Y+18, r25	; 0x12
    3074:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3076:	8b 89       	ldd	r24, Y+19	; 0x13
    3078:	9c 89       	ldd	r25, Y+20	; 0x14
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	9c 8b       	std	Y+20, r25	; 0x14
    307e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3080:	8b 89       	ldd	r24, Y+19	; 0x13
    3082:	9c 89       	ldd	r25, Y+20	; 0x14
    3084:	00 97       	sbiw	r24, 0x00	; 0
    3086:	69 f7       	brne	.-38     	; 0x3062 <TAKE_action+0x45c>
    3088:	14 c0       	rjmp	.+40     	; 0x30b2 <TAKE_action+0x4ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308a:	6d 89       	ldd	r22, Y+21	; 0x15
    308c:	7e 89       	ldd	r23, Y+22	; 0x16
    308e:	8f 89       	ldd	r24, Y+23	; 0x17
    3090:	98 8d       	ldd	r25, Y+24	; 0x18
    3092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3096:	dc 01       	movw	r26, r24
    3098:	cb 01       	movw	r24, r22
    309a:	9c 8b       	std	Y+20, r25	; 0x14
    309c:	8b 8b       	std	Y+19, r24	; 0x13
    309e:	8b 89       	ldd	r24, Y+19	; 0x13
    30a0:	9c 89       	ldd	r25, Y+20	; 0x14
    30a2:	98 8b       	std	Y+16, r25	; 0x10
    30a4:	8f 87       	std	Y+15, r24	; 0x0f
    30a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a8:	98 89       	ldd	r25, Y+16	; 0x10
    30aa:	01 97       	sbiw	r24, 0x01	; 1
    30ac:	f1 f7       	brne	.-4      	; 0x30aa <TAKE_action+0x4a4>
    30ae:	98 8b       	std	Y+16, r25	; 0x10
    30b0:	8f 87       	std	Y+15, r24	; 0x0f
					_delay_ms(1000);
					H_LCD_void_clear();
    30b2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
				}
			}
		}while((check == FAIL ));
    30b6:	fe 01       	movw	r30, r28
    30b8:	e7 5b       	subi	r30, 0xB7	; 183
    30ba:	ff 4f       	sbci	r31, 0xFF	; 255
    30bc:	80 81       	ld	r24, Z
    30be:	88 23       	and	r24, r24
    30c0:	09 f4       	brne	.+2      	; 0x30c4 <TAKE_action+0x4be>
    30c2:	52 ce       	rjmp	.-860    	; 0x2d68 <TAKE_action+0x162>
		if(check == PASS)
    30c4:	fe 01       	movw	r30, r28
    30c6:	e7 5b       	subi	r30, 0xB7	; 183
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	80 81       	ld	r24, Z
    30cc:	81 30       	cpi	r24, 0x01	; 1
    30ce:	09 f0       	breq	.+2      	; 0x30d2 <TAKE_action+0x4cc>
    30d0:	c8 c0       	rjmp	.+400    	; 0x3262 <TAKE_action+0x65c>
		{
			return check ;
    30d2:	fe 01       	movw	r30, r28
    30d4:	e7 5b       	subi	r30, 0xB7	; 183
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	2b 96       	adiw	r28, 0x0b	; 11
    30dc:	8f af       	std	Y+63, r24	; 0x3f
    30de:	2b 97       	sbiw	r28, 0x0b	; 11
    30e0:	c7 c0       	rjmp	.+398    	; 0x3270 <TAKE_action+0x66a>

	}
	else
	{

		H_LCD_void_sendString((const s8 *)"out of range");
    30e2:	80 ec       	ldi	r24, 0xC0	; 192
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
		H_LCD_void_gotXY(1,0);
    30ea:	81 e0       	ldi	r24, 0x01	; 1
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	0e 94 8e 10 	call	0x211c	; 0x211c <H_LCD_void_gotXY>
		H_LCD_void_sendData(((distance/1000)%10)+48);
    30f2:	80 91 f4 01 	lds	r24, 0x01F4
    30f6:	90 91 f5 01 	lds	r25, 0x01F5
    30fa:	28 ee       	ldi	r18, 0xE8	; 232
    30fc:	33 e0       	ldi	r19, 0x03	; 3
    30fe:	b9 01       	movw	r22, r18
    3100:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3104:	cb 01       	movw	r24, r22
    3106:	2a e0       	ldi	r18, 0x0A	; 10
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	b9 01       	movw	r22, r18
    310c:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3110:	80 5d       	subi	r24, 0xD0	; 208
    3112:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
		H_LCD_void_sendData(((distance/100)%10)+48);
    3116:	80 91 f4 01 	lds	r24, 0x01F4
    311a:	90 91 f5 01 	lds	r25, 0x01F5
    311e:	24 e6       	ldi	r18, 0x64	; 100
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	b9 01       	movw	r22, r18
    3124:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3128:	cb 01       	movw	r24, r22
    312a:	2a e0       	ldi	r18, 0x0A	; 10
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	b9 01       	movw	r22, r18
    3130:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3134:	80 5d       	subi	r24, 0xD0	; 208
    3136:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
		H_LCD_void_sendData(((distance/10)%10)+48);
    313a:	80 91 f4 01 	lds	r24, 0x01F4
    313e:	90 91 f5 01 	lds	r25, 0x01F5
    3142:	2a e0       	ldi	r18, 0x0A	; 10
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	b9 01       	movw	r22, r18
    3148:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    314c:	cb 01       	movw	r24, r22
    314e:	2a e0       	ldi	r18, 0x0A	; 10
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	b9 01       	movw	r22, r18
    3154:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3158:	80 5d       	subi	r24, 0xD0	; 208
    315a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
		H_LCD_void_sendData((distance%10)+48);
    315e:	80 91 f4 01 	lds	r24, 0x01F4
    3162:	90 91 f5 01 	lds	r25, 0x01F5
    3166:	2a e0       	ldi	r18, 0x0A	; 10
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	b9 01       	movw	r22, r18
    316c:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3170:	80 5d       	subi	r24, 0xD0	; 208
    3172:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	aa ef       	ldi	r26, 0xFA	; 250
    317c:	b3 e4       	ldi	r27, 0x43	; 67
    317e:	8b 87       	std	Y+11, r24	; 0x0b
    3180:	9c 87       	std	Y+12, r25	; 0x0c
    3182:	ad 87       	std	Y+13, r26	; 0x0d
    3184:	be 87       	std	Y+14, r27	; 0x0e
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3186:	6b 85       	ldd	r22, Y+11	; 0x0b
    3188:	7c 85       	ldd	r23, Y+12	; 0x0c
    318a:	8d 85       	ldd	r24, Y+13	; 0x0d
    318c:	9e 85       	ldd	r25, Y+14	; 0x0e
    318e:	20 e0       	ldi	r18, 0x00	; 0
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	4a e7       	ldi	r20, 0x7A	; 122
    3194:	55 e4       	ldi	r21, 0x45	; 69
    3196:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    319a:	dc 01       	movw	r26, r24
    319c:	cb 01       	movw	r24, r22
    319e:	8f 83       	std	Y+7, r24	; 0x07
    31a0:	98 87       	std	Y+8, r25	; 0x08
    31a2:	a9 87       	std	Y+9, r26	; 0x09
    31a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31a6:	6f 81       	ldd	r22, Y+7	; 0x07
    31a8:	78 85       	ldd	r23, Y+8	; 0x08
    31aa:	89 85       	ldd	r24, Y+9	; 0x09
    31ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    31ae:	20 e0       	ldi	r18, 0x00	; 0
    31b0:	30 e0       	ldi	r19, 0x00	; 0
    31b2:	40 e8       	ldi	r20, 0x80	; 128
    31b4:	5f e3       	ldi	r21, 0x3F	; 63
    31b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ba:	88 23       	and	r24, r24
    31bc:	2c f4       	brge	.+10     	; 0x31c8 <TAKE_action+0x5c2>
		__ticks = 1;
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	9e 83       	std	Y+6, r25	; 0x06
    31c4:	8d 83       	std	Y+5, r24	; 0x05
    31c6:	3f c0       	rjmp	.+126    	; 0x3246 <TAKE_action+0x640>
	else if (__tmp > 65535)
    31c8:	6f 81       	ldd	r22, Y+7	; 0x07
    31ca:	78 85       	ldd	r23, Y+8	; 0x08
    31cc:	89 85       	ldd	r24, Y+9	; 0x09
    31ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    31d0:	20 e0       	ldi	r18, 0x00	; 0
    31d2:	3f ef       	ldi	r19, 0xFF	; 255
    31d4:	4f e7       	ldi	r20, 0x7F	; 127
    31d6:	57 e4       	ldi	r21, 0x47	; 71
    31d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31dc:	18 16       	cp	r1, r24
    31de:	4c f5       	brge	.+82     	; 0x3232 <TAKE_action+0x62c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	40 e2       	ldi	r20, 0x20	; 32
    31ee:	51 e4       	ldi	r21, 0x41	; 65
    31f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	bc 01       	movw	r22, r24
    31fa:	cd 01       	movw	r24, r26
    31fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
    3204:	9e 83       	std	Y+6, r25	; 0x06
    3206:	8d 83       	std	Y+5, r24	; 0x05
    3208:	0f c0       	rjmp	.+30     	; 0x3228 <TAKE_action+0x622>
    320a:	80 e9       	ldi	r24, 0x90	; 144
    320c:	91 e0       	ldi	r25, 0x01	; 1
    320e:	9c 83       	std	Y+4, r25	; 0x04
    3210:	8b 83       	std	Y+3, r24	; 0x03
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	9c 81       	ldd	r25, Y+4	; 0x04
    3216:	01 97       	sbiw	r24, 0x01	; 1
    3218:	f1 f7       	brne	.-4      	; 0x3216 <TAKE_action+0x610>
    321a:	9c 83       	std	Y+4, r25	; 0x04
    321c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	9e 81       	ldd	r25, Y+6	; 0x06
    3222:	01 97       	sbiw	r24, 0x01	; 1
    3224:	9e 83       	std	Y+6, r25	; 0x06
    3226:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3228:	8d 81       	ldd	r24, Y+5	; 0x05
    322a:	9e 81       	ldd	r25, Y+6	; 0x06
    322c:	00 97       	sbiw	r24, 0x00	; 0
    322e:	69 f7       	brne	.-38     	; 0x320a <TAKE_action+0x604>
    3230:	14 c0       	rjmp	.+40     	; 0x325a <TAKE_action+0x654>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3232:	6f 81       	ldd	r22, Y+7	; 0x07
    3234:	78 85       	ldd	r23, Y+8	; 0x08
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	9a 85       	ldd	r25, Y+10	; 0x0a
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	9e 83       	std	Y+6, r25	; 0x06
    3244:	8d 83       	std	Y+5, r24	; 0x05
    3246:	8d 81       	ldd	r24, Y+5	; 0x05
    3248:	9e 81       	ldd	r25, Y+6	; 0x06
    324a:	9a 83       	std	Y+2, r25	; 0x02
    324c:	89 83       	std	Y+1, r24	; 0x01
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	9a 81       	ldd	r25, Y+2	; 0x02
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <TAKE_action+0x64c>
    3256:	9a 83       	std	Y+2, r25	; 0x02
    3258:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		H_LCD_void_clear();
    325a:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>

		DC_MOTOR();
    325e:	0e 94 bf 1a 	call	0x357e	; 0x357e <DC_MOTOR>

	}
	return check;
    3262:	fe 01       	movw	r30, r28
    3264:	e7 5b       	subi	r30, 0xB7	; 183
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	80 81       	ld	r24, Z
    326a:	2b 96       	adiw	r28, 0x0b	; 11
    326c:	8f af       	std	Y+63, r24	; 0x3f
    326e:	2b 97       	sbiw	r28, 0x0b	; 11
    3270:	2b 96       	adiw	r28, 0x0b	; 11
    3272:	8f ad       	ldd	r24, Y+63	; 0x3f
    3274:	2b 97       	sbiw	r28, 0x0b	; 11
}
    3276:	c6 5b       	subi	r28, 0xB6	; 182
    3278:	df 4f       	sbci	r29, 0xFF	; 255
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	1f 91       	pop	r17
    328a:	0f 91       	pop	r16
    328c:	08 95       	ret

0000328e <get_and_check_password>:

static u8 get_and_check_password(void)
{
    328e:	df 93       	push	r29
    3290:	cf 93       	push	r28
    3292:	cd b7       	in	r28, 0x3d	; 61
    3294:	de b7       	in	r29, 0x3e	; 62
    3296:	a3 97       	sbiw	r28, 0x23	; 35
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	de bf       	out	0x3e, r29	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	cd bf       	out	0x3d, r28	; 61
	u8 check = FAIL;
    32a2:	1f 8e       	std	Y+31, r1	; 0x1f
	u8 i = 0;
    32a4:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 read = NO_PRESSED_KEY;
    32a6:	8f ef       	ldi	r24, 0xFF	; 255
    32a8:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 temp_pass_arr[MAX_PASS_SIZE] = {0};
    32aa:	18 a2       	std	Y+32, r1	; 0x20
    32ac:	19 a2       	std	Y+33, r1	; 0x21
    32ae:	1a a2       	std	Y+34, r1	; 0x22
    32b0:	1b a2       	std	Y+35, r1	; 0x23
	H_LCD_void_gotXY(0,0);
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	60 e0       	ldi	r22, 0x00	; 0
    32b6:	0e 94 8e 10 	call	0x211c	; 0x211c <H_LCD_void_gotXY>
	for( i=1 ;i < MAX_PASS_SIZE+1 ;i++ )
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	8e 8f       	std	Y+30, r24	; 0x1e
    32be:	97 c0       	rjmp	.+302    	; 0x33ee <get_and_check_password+0x160>
	{
		while(read == NO_PRESSED_KEY)
		{
			read = H_KEYPAD_u8_getPressesKey();
    32c0:	0e 94 88 13 	call	0x2710	; 0x2710 <H_KEYPAD_u8_getPressesKey>
    32c4:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 read = NO_PRESSED_KEY;
	u8 temp_pass_arr[MAX_PASS_SIZE] = {0};
	H_LCD_void_gotXY(0,0);
	for( i=1 ;i < MAX_PASS_SIZE+1 ;i++ )
	{
		while(read == NO_PRESSED_KEY)
    32c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32c8:	8f 3f       	cpi	r24, 0xFF	; 255
    32ca:	d1 f3       	breq	.-12     	; 0x32c0 <get_and_check_password+0x32>
		{
			read = H_KEYPAD_u8_getPressesKey();
		}
		temp_pass_arr[i-1] = read;
    32cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    32ce:	88 2f       	mov	r24, r24
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	9c 01       	movw	r18, r24
    32d4:	21 50       	subi	r18, 0x01	; 1
    32d6:	30 40       	sbci	r19, 0x00	; 0
    32d8:	ce 01       	movw	r24, r28
    32da:	80 96       	adiw	r24, 0x20	; 32
    32dc:	fc 01       	movw	r30, r24
    32de:	e2 0f       	add	r30, r18
    32e0:	f3 1f       	adc	r31, r19
    32e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e4:	80 83       	st	Z, r24
		H_LCD_void_sendData(read);
    32e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e8:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	aa ef       	ldi	r26, 0xFA	; 250
    32f2:	b3 e4       	ldi	r27, 0x43	; 67
    32f4:	89 8f       	std	Y+25, r24	; 0x19
    32f6:	9a 8f       	std	Y+26, r25	; 0x1a
    32f8:	ab 8f       	std	Y+27, r26	; 0x1b
    32fa:	bc 8f       	std	Y+28, r27	; 0x1c
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fc:	69 8d       	ldd	r22, Y+25	; 0x19
    32fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a e7       	ldi	r20, 0x7A	; 122
    330a:	55 e4       	ldi	r21, 0x45	; 69
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	8d 8b       	std	Y+21, r24	; 0x15
    3316:	9e 8b       	std	Y+22, r25	; 0x16
    3318:	af 8b       	std	Y+23, r26	; 0x17
    331a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    331c:	6d 89       	ldd	r22, Y+21	; 0x15
    331e:	7e 89       	ldd	r23, Y+22	; 0x16
    3320:	8f 89       	ldd	r24, Y+23	; 0x17
    3322:	98 8d       	ldd	r25, Y+24	; 0x18
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	2c f4       	brge	.+10     	; 0x333e <get_and_check_password+0xb0>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9c 8b       	std	Y+20, r25	; 0x14
    333a:	8b 8b       	std	Y+19, r24	; 0x13
    333c:	3f c0       	rjmp	.+126    	; 0x33bc <get_and_check_password+0x12e>
	else if (__tmp > 65535)
    333e:	6d 89       	ldd	r22, Y+21	; 0x15
    3340:	7e 89       	ldd	r23, Y+22	; 0x16
    3342:	8f 89       	ldd	r24, Y+23	; 0x17
    3344:	98 8d       	ldd	r25, Y+24	; 0x18
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	3f ef       	ldi	r19, 0xFF	; 255
    334a:	4f e7       	ldi	r20, 0x7F	; 127
    334c:	57 e4       	ldi	r21, 0x47	; 71
    334e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3352:	18 16       	cp	r1, r24
    3354:	4c f5       	brge	.+82     	; 0x33a8 <get_and_check_password+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3356:	69 8d       	ldd	r22, Y+25	; 0x19
    3358:	7a 8d       	ldd	r23, Y+26	; 0x1a
    335a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    335c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e2       	ldi	r20, 0x20	; 32
    3364:	51 e4       	ldi	r21, 0x41	; 65
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9c 8b       	std	Y+20, r25	; 0x14
    337c:	8b 8b       	std	Y+19, r24	; 0x13
    337e:	0f c0       	rjmp	.+30     	; 0x339e <get_and_check_password+0x110>
    3380:	80 e9       	ldi	r24, 0x90	; 144
    3382:	91 e0       	ldi	r25, 0x01	; 1
    3384:	9a 8b       	std	Y+18, r25	; 0x12
    3386:	89 8b       	std	Y+17, r24	; 0x11
    3388:	89 89       	ldd	r24, Y+17	; 0x11
    338a:	9a 89       	ldd	r25, Y+18	; 0x12
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <get_and_check_password+0xfe>
    3390:	9a 8b       	std	Y+18, r25	; 0x12
    3392:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3394:	8b 89       	ldd	r24, Y+19	; 0x13
    3396:	9c 89       	ldd	r25, Y+20	; 0x14
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	9c 8b       	std	Y+20, r25	; 0x14
    339c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339e:	8b 89       	ldd	r24, Y+19	; 0x13
    33a0:	9c 89       	ldd	r25, Y+20	; 0x14
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	69 f7       	brne	.-38     	; 0x3380 <get_and_check_password+0xf2>
    33a6:	14 c0       	rjmp	.+40     	; 0x33d0 <get_and_check_password+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a8:	6d 89       	ldd	r22, Y+21	; 0x15
    33aa:	7e 89       	ldd	r23, Y+22	; 0x16
    33ac:	8f 89       	ldd	r24, Y+23	; 0x17
    33ae:	98 8d       	ldd	r25, Y+24	; 0x18
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9c 8b       	std	Y+20, r25	; 0x14
    33ba:	8b 8b       	std	Y+19, r24	; 0x13
    33bc:	8b 89       	ldd	r24, Y+19	; 0x13
    33be:	9c 89       	ldd	r25, Y+20	; 0x14
    33c0:	98 8b       	std	Y+16, r25	; 0x10
    33c2:	8f 87       	std	Y+15, r24	; 0x0f
    33c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c6:	98 89       	ldd	r25, Y+16	; 0x10
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <get_and_check_password+0x13a>
    33cc:	98 8b       	std	Y+16, r25	; 0x10
    33ce:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		H_LCD_void_gotXY(0, i-1);
    33d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33d2:	98 2f       	mov	r25, r24
    33d4:	91 50       	subi	r25, 0x01	; 1
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	69 2f       	mov	r22, r25
    33da:	0e 94 8e 10 	call	0x211c	; 0x211c <H_LCD_void_gotXY>
		H_LCD_void_sendData('*');
    33de:	8a e2       	ldi	r24, 0x2A	; 42
    33e0:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
		read = NO_PRESSED_KEY ;
    33e4:	8f ef       	ldi	r24, 0xFF	; 255
    33e6:	8d 8f       	std	Y+29, r24	; 0x1d
	u8 check = FAIL;
	u8 i = 0;
	u8 read = NO_PRESSED_KEY;
	u8 temp_pass_arr[MAX_PASS_SIZE] = {0};
	H_LCD_void_gotXY(0,0);
	for( i=1 ;i < MAX_PASS_SIZE+1 ;i++ )
    33e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33ea:	8f 5f       	subi	r24, 0xFF	; 255
    33ec:	8e 8f       	std	Y+30, r24	; 0x1e
    33ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33f0:	85 30       	cpi	r24, 0x05	; 5
    33f2:	08 f4       	brcc	.+2      	; 0x33f6 <get_and_check_password+0x168>
    33f4:	68 cf       	rjmp	.-304    	; 0x32c6 <get_and_check_password+0x38>
		H_LCD_void_sendData('*');
		read = NO_PRESSED_KEY ;

	}

	for(i=0 ; i < MAX_PASS_SIZE ; i++)
    33f6:	1e 8e       	std	Y+30, r1	; 0x1e
    33f8:	1a c0       	rjmp	.+52     	; 0x342e <get_and_check_password+0x1a0>
	{
		if(temp_pass_arr[i] == pass_arr[i])
    33fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33fc:	28 2f       	mov	r18, r24
    33fe:	30 e0       	ldi	r19, 0x00	; 0
    3400:	ce 01       	movw	r24, r28
    3402:	80 96       	adiw	r24, 0x20	; 32
    3404:	fc 01       	movw	r30, r24
    3406:	e2 0f       	add	r30, r18
    3408:	f3 1f       	adc	r31, r19
    340a:	20 81       	ld	r18, Z
    340c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    340e:	88 2f       	mov	r24, r24
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	fc 01       	movw	r30, r24
    3414:	e1 52       	subi	r30, 0x21	; 33
    3416:	fe 4f       	sbci	r31, 0xFE	; 254
    3418:	80 81       	ld	r24, Z
    341a:	28 17       	cp	r18, r24
    341c:	31 f4       	brne	.+12     	; 0x342a <get_and_check_password+0x19c>
		{
			check = PASS;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	8f 8f       	std	Y+31, r24	; 0x1f
		H_LCD_void_sendData('*');
		read = NO_PRESSED_KEY ;

	}

	for(i=0 ; i < MAX_PASS_SIZE ; i++)
    3422:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3424:	8f 5f       	subi	r24, 0xFF	; 255
    3426:	8e 8f       	std	Y+30, r24	; 0x1e
    3428:	02 c0       	rjmp	.+4      	; 0x342e <get_and_check_password+0x1a0>
		{
			check = PASS;
		}
		else
		{
			check = FAIL;
    342a:	1f 8e       	std	Y+31, r1	; 0x1f
    342c:	03 c0       	rjmp	.+6      	; 0x3434 <get_and_check_password+0x1a6>
		H_LCD_void_sendData('*');
		read = NO_PRESSED_KEY ;

	}

	for(i=0 ; i < MAX_PASS_SIZE ; i++)
    342e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3430:	84 30       	cpi	r24, 0x04	; 4
    3432:	18 f3       	brcs	.-58     	; 0x33fa <get_and_check_password+0x16c>
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	aa ef       	ldi	r26, 0xFA	; 250
    343a:	b3 e4       	ldi	r27, 0x43	; 67
    343c:	8b 87       	std	Y+11, r24	; 0x0b
    343e:	9c 87       	std	Y+12, r25	; 0x0c
    3440:	ad 87       	std	Y+13, r26	; 0x0d
    3442:	be 87       	std	Y+14, r27	; 0x0e
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3444:	6b 85       	ldd	r22, Y+11	; 0x0b
    3446:	7c 85       	ldd	r23, Y+12	; 0x0c
    3448:	8d 85       	ldd	r24, Y+13	; 0x0d
    344a:	9e 85       	ldd	r25, Y+14	; 0x0e
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	4a e7       	ldi	r20, 0x7A	; 122
    3452:	55 e4       	ldi	r21, 0x45	; 69
    3454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3458:	dc 01       	movw	r26, r24
    345a:	cb 01       	movw	r24, r22
    345c:	8f 83       	std	Y+7, r24	; 0x07
    345e:	98 87       	std	Y+8, r25	; 0x08
    3460:	a9 87       	std	Y+9, r26	; 0x09
    3462:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3464:	6f 81       	ldd	r22, Y+7	; 0x07
    3466:	78 85       	ldd	r23, Y+8	; 0x08
    3468:	89 85       	ldd	r24, Y+9	; 0x09
    346a:	9a 85       	ldd	r25, Y+10	; 0x0a
    346c:	20 e0       	ldi	r18, 0x00	; 0
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e8       	ldi	r20, 0x80	; 128
    3472:	5f e3       	ldi	r21, 0x3F	; 63
    3474:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3478:	88 23       	and	r24, r24
    347a:	2c f4       	brge	.+10     	; 0x3486 <get_and_check_password+0x1f8>
		__ticks = 1;
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	9e 83       	std	Y+6, r25	; 0x06
    3482:	8d 83       	std	Y+5, r24	; 0x05
    3484:	3f c0       	rjmp	.+126    	; 0x3504 <get_and_check_password+0x276>
	else if (__tmp > 65535)
    3486:	6f 81       	ldd	r22, Y+7	; 0x07
    3488:	78 85       	ldd	r23, Y+8	; 0x08
    348a:	89 85       	ldd	r24, Y+9	; 0x09
    348c:	9a 85       	ldd	r25, Y+10	; 0x0a
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	3f ef       	ldi	r19, 0xFF	; 255
    3492:	4f e7       	ldi	r20, 0x7F	; 127
    3494:	57 e4       	ldi	r21, 0x47	; 71
    3496:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    349a:	18 16       	cp	r1, r24
    349c:	4c f5       	brge	.+82     	; 0x34f0 <get_and_check_password+0x262>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    349e:	6b 85       	ldd	r22, Y+11	; 0x0b
    34a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    34a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    34a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	40 e2       	ldi	r20, 0x20	; 32
    34ac:	51 e4       	ldi	r21, 0x41	; 65
    34ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34b2:	dc 01       	movw	r26, r24
    34b4:	cb 01       	movw	r24, r22
    34b6:	bc 01       	movw	r22, r24
    34b8:	cd 01       	movw	r24, r26
    34ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34be:	dc 01       	movw	r26, r24
    34c0:	cb 01       	movw	r24, r22
    34c2:	9e 83       	std	Y+6, r25	; 0x06
    34c4:	8d 83       	std	Y+5, r24	; 0x05
    34c6:	0f c0       	rjmp	.+30     	; 0x34e6 <get_and_check_password+0x258>
    34c8:	80 e9       	ldi	r24, 0x90	; 144
    34ca:	91 e0       	ldi	r25, 0x01	; 1
    34cc:	9c 83       	std	Y+4, r25	; 0x04
    34ce:	8b 83       	std	Y+3, r24	; 0x03
    34d0:	8b 81       	ldd	r24, Y+3	; 0x03
    34d2:	9c 81       	ldd	r25, Y+4	; 0x04
    34d4:	01 97       	sbiw	r24, 0x01	; 1
    34d6:	f1 f7       	brne	.-4      	; 0x34d4 <get_and_check_password+0x246>
    34d8:	9c 83       	std	Y+4, r25	; 0x04
    34da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34dc:	8d 81       	ldd	r24, Y+5	; 0x05
    34de:	9e 81       	ldd	r25, Y+6	; 0x06
    34e0:	01 97       	sbiw	r24, 0x01	; 1
    34e2:	9e 83       	std	Y+6, r25	; 0x06
    34e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34e6:	8d 81       	ldd	r24, Y+5	; 0x05
    34e8:	9e 81       	ldd	r25, Y+6	; 0x06
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	69 f7       	brne	.-38     	; 0x34c8 <get_and_check_password+0x23a>
    34ee:	14 c0       	rjmp	.+40     	; 0x3518 <get_and_check_password+0x28a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34f0:	6f 81       	ldd	r22, Y+7	; 0x07
    34f2:	78 85       	ldd	r23, Y+8	; 0x08
    34f4:	89 85       	ldd	r24, Y+9	; 0x09
    34f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    34f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	9e 83       	std	Y+6, r25	; 0x06
    3502:	8d 83       	std	Y+5, r24	; 0x05
    3504:	8d 81       	ldd	r24, Y+5	; 0x05
    3506:	9e 81       	ldd	r25, Y+6	; 0x06
    3508:	9a 83       	std	Y+2, r25	; 0x02
    350a:	89 83       	std	Y+1, r24	; 0x01
    350c:	89 81       	ldd	r24, Y+1	; 0x01
    350e:	9a 81       	ldd	r25, Y+2	; 0x02
    3510:	01 97       	sbiw	r24, 0x01	; 1
    3512:	f1 f7       	brne	.-4      	; 0x3510 <get_and_check_password+0x282>
    3514:	9a 83       	std	Y+2, r25	; 0x02
    3516:	89 83       	std	Y+1, r24	; 0x01
			check = FAIL;
			break;
		}
	}
	_delay_ms(500);
	return check;
    3518:	8f 8d       	ldd	r24, Y+31	; 0x1f
}
    351a:	a3 96       	adiw	r28, 0x23	; 35
    351c:	0f b6       	in	r0, 0x3f	; 63
    351e:	f8 94       	cli
    3520:	de bf       	out	0x3e, r29	; 62
    3522:	0f be       	out	0x3f, r0	; 63
    3524:	cd bf       	out	0x3d, r28	; 61
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	08 95       	ret

0000352c <ALL_LEDS_ON>:

void ALL_LEDS_ON(void)
{
    352c:	df 93       	push	r29
    352e:	cf 93       	push	r28
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
	H_Led_void_ledInit(GRN_LED);
    3534:	81 e0       	ldi	r24, 0x01	; 1
    3536:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <H_Led_void_ledInit>
	H_Led_void_ledInit(BLU_LED);
    353a:	82 e0       	ldi	r24, 0x02	; 2
    353c:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <H_Led_void_ledInit>
	H_Led_void_ledInit(RED_LED);
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <H_Led_void_ledInit>

	H_Led_void_setON(GRN_LED);
    3546:	81 e0       	ldi	r24, 0x01	; 1
    3548:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <H_Led_void_setON>
	H_Led_void_setON(BLU_LED);
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <H_Led_void_setON>
	H_Led_void_setON(RED_LED);
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <H_Led_void_setON>

}
    3558:	cf 91       	pop	r28
    355a:	df 91       	pop	r29
    355c:	08 95       	ret

0000355e <ALL_LEDS_OFF>:

void ALL_LEDS_OFF (void)
{
    355e:	df 93       	push	r29
    3560:	cf 93       	push	r28
    3562:	cd b7       	in	r28, 0x3d	; 61
    3564:	de b7       	in	r29, 0x3e	; 62
	H_Led_void_setOFF(GRN_LED);
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <H_Led_void_setOFF>
	H_Led_void_setOFF(BLU_LED);
    356c:	82 e0       	ldi	r24, 0x02	; 2
    356e:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <H_Led_void_setOFF>
	H_Led_void_setOFF(RED_LED);
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	0e 94 91 0d 	call	0x1b22	; 0x1b22 <H_Led_void_setOFF>
}
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <DC_MOTOR>:


 void DC_MOTOR(void)
 {
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
    3586:	2e 97       	sbiw	r28, 0x0e	; 14
    3588:	0f b6       	in	r0, 0x3f	; 63
    358a:	f8 94       	cli
    358c:	de bf       	out	0x3e, r29	; 62
    358e:	0f be       	out	0x3f, r0	; 63
    3590:	cd bf       	out	0x3d, r28	; 61
	//u8 check = FAIL;
	 		TEMP_read = H_TempSensor_u16_read(); //from here we start the temp
    3592:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <H_TempSensor_u16_read>
    3596:	90 93 f7 01 	sts	0x01F7, r25
    359a:	80 93 f6 01 	sts	0x01F6, r24
	 		if(TEMP_read <= 25)
    359e:	80 91 f6 01 	lds	r24, 0x01F6
    35a2:	90 91 f7 01 	lds	r25, 0x01F7
    35a6:	8a 31       	cpi	r24, 0x1A	; 26
    35a8:	91 05       	cpc	r25, r1
    35aa:	18 f4       	brcc	.+6      	; 0x35b2 <DC_MOTOR+0x34>
	 		{
	 			H_DcMotor_void_OF();// dc motor off
    35ac:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <H_DcMotor_void_OF>
    35b0:	02 c0       	rjmp	.+4      	; 0x35b6 <DC_MOTOR+0x38>
	 		}

	 		else
	 		{
	 			H_DcMotor_void_ON();// dc motor  on
    35b2:	0e 94 6f 0b 	call	0x16de	; 0x16de <H_DcMotor_void_ON>
	 		}
	 		H_LCD_void_clear();
    35b6:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <H_LCD_void_clear>
	 		H_LCD_void_sendString((const s8 *)"temp is :");
    35ba:	8d ec       	ldi	r24, 0xCD	; 205
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <H_LCD_void_sendString>
	 		H_LCD_void_gotXY(1,0);
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	0e 94 8e 10 	call	0x211c	; 0x211c <H_LCD_void_gotXY>
	 		H_LCD_void_sendData(((TEMP_read/10000)%10)+48);
    35ca:	80 91 f6 01 	lds	r24, 0x01F6
    35ce:	90 91 f7 01 	lds	r25, 0x01F7
    35d2:	20 e1       	ldi	r18, 0x10	; 16
    35d4:	37 e2       	ldi	r19, 0x27	; 39
    35d6:	b9 01       	movw	r22, r18
    35d8:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    35dc:	cb 01       	movw	r24, r22
    35de:	2a e0       	ldi	r18, 0x0A	; 10
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	b9 01       	movw	r22, r18
    35e4:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    35e8:	80 5d       	subi	r24, 0xD0	; 208
    35ea:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
	 		H_LCD_void_sendData(((TEMP_read/1000)%10)+48);
    35ee:	80 91 f6 01 	lds	r24, 0x01F6
    35f2:	90 91 f7 01 	lds	r25, 0x01F7
    35f6:	28 ee       	ldi	r18, 0xE8	; 232
    35f8:	33 e0       	ldi	r19, 0x03	; 3
    35fa:	b9 01       	movw	r22, r18
    35fc:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3600:	cb 01       	movw	r24, r22
    3602:	2a e0       	ldi	r18, 0x0A	; 10
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	b9 01       	movw	r22, r18
    3608:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    360c:	80 5d       	subi	r24, 0xD0	; 208
    360e:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
	 		H_LCD_void_sendData(((TEMP_read/100)%10)+48);
    3612:	80 91 f6 01 	lds	r24, 0x01F6
    3616:	90 91 f7 01 	lds	r25, 0x01F7
    361a:	24 e6       	ldi	r18, 0x64	; 100
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	b9 01       	movw	r22, r18
    3620:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3624:	cb 01       	movw	r24, r22
    3626:	2a e0       	ldi	r18, 0x0A	; 10
    3628:	30 e0       	ldi	r19, 0x00	; 0
    362a:	b9 01       	movw	r22, r18
    362c:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3630:	80 5d       	subi	r24, 0xD0	; 208
    3632:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
	 		H_LCD_void_sendData((TEMP_read%10)+48);
    3636:	80 91 f6 01 	lds	r24, 0x01F6
    363a:	90 91 f7 01 	lds	r25, 0x01F7
    363e:	2a e0       	ldi	r18, 0x0A	; 10
    3640:	30 e0       	ldi	r19, 0x00	; 0
    3642:	b9 01       	movw	r22, r18
    3644:	0e 94 c1 1b 	call	0x3782	; 0x3782 <__udivmodhi4>
    3648:	80 5d       	subi	r24, 0xD0	; 208
    364a:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <H_LCD_void_sendData>
    364e:	80 e0       	ldi	r24, 0x00	; 0
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	aa e7       	ldi	r26, 0x7A	; 122
    3654:	b4 e4       	ldi	r27, 0x44	; 68
    3656:	8b 87       	std	Y+11, r24	; 0x0b
    3658:	9c 87       	std	Y+12, r25	; 0x0c
    365a:	ad 87       	std	Y+13, r26	; 0x0d
    365c:	be 87       	std	Y+14, r27	; 0x0e
   user will not be informed about decreased resolution.
 */
void _delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    365e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3660:	7c 85       	ldd	r23, Y+12	; 0x0c
    3662:	8d 85       	ldd	r24, Y+13	; 0x0d
    3664:	9e 85       	ldd	r25, Y+14	; 0x0e
    3666:	20 e0       	ldi	r18, 0x00	; 0
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	4a e7       	ldi	r20, 0x7A	; 122
    366c:	55 e4       	ldi	r21, 0x45	; 69
    366e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	8f 83       	std	Y+7, r24	; 0x07
    3678:	98 87       	std	Y+8, r25	; 0x08
    367a:	a9 87       	std	Y+9, r26	; 0x09
    367c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    367e:	6f 81       	ldd	r22, Y+7	; 0x07
    3680:	78 85       	ldd	r23, Y+8	; 0x08
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	9a 85       	ldd	r25, Y+10	; 0x0a
    3686:	20 e0       	ldi	r18, 0x00	; 0
    3688:	30 e0       	ldi	r19, 0x00	; 0
    368a:	40 e8       	ldi	r20, 0x80	; 128
    368c:	5f e3       	ldi	r21, 0x3F	; 63
    368e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3692:	88 23       	and	r24, r24
    3694:	2c f4       	brge	.+10     	; 0x36a0 <DC_MOTOR+0x122>
		__ticks = 1;
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	9e 83       	std	Y+6, r25	; 0x06
    369c:	8d 83       	std	Y+5, r24	; 0x05
    369e:	3f c0       	rjmp	.+126    	; 0x371e <DC_MOTOR+0x1a0>
	else if (__tmp > 65535)
    36a0:	6f 81       	ldd	r22, Y+7	; 0x07
    36a2:	78 85       	ldd	r23, Y+8	; 0x08
    36a4:	89 85       	ldd	r24, Y+9	; 0x09
    36a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	3f ef       	ldi	r19, 0xFF	; 255
    36ac:	4f e7       	ldi	r20, 0x7F	; 127
    36ae:	57 e4       	ldi	r21, 0x47	; 71
    36b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36b4:	18 16       	cp	r1, r24
    36b6:	4c f5       	brge	.+82     	; 0x370a <DC_MOTOR+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    36ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    36bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36be:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c0:	20 e0       	ldi	r18, 0x00	; 0
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	40 e2       	ldi	r20, 0x20	; 32
    36c6:	51 e4       	ldi	r21, 0x41	; 65
    36c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	bc 01       	movw	r22, r24
    36d2:	cd 01       	movw	r24, r26
    36d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d8:	dc 01       	movw	r26, r24
    36da:	cb 01       	movw	r24, r22
    36dc:	9e 83       	std	Y+6, r25	; 0x06
    36de:	8d 83       	std	Y+5, r24	; 0x05
    36e0:	0f c0       	rjmp	.+30     	; 0x3700 <DC_MOTOR+0x182>
    36e2:	80 e9       	ldi	r24, 0x90	; 144
    36e4:	91 e0       	ldi	r25, 0x01	; 1
    36e6:	9c 83       	std	Y+4, r25	; 0x04
    36e8:	8b 83       	std	Y+3, r24	; 0x03
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	9c 81       	ldd	r25, Y+4	; 0x04
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <DC_MOTOR+0x170>
    36f2:	9c 83       	std	Y+4, r25	; 0x04
    36f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36f6:	8d 81       	ldd	r24, Y+5	; 0x05
    36f8:	9e 81       	ldd	r25, Y+6	; 0x06
    36fa:	01 97       	sbiw	r24, 0x01	; 1
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3700:	8d 81       	ldd	r24, Y+5	; 0x05
    3702:	9e 81       	ldd	r25, Y+6	; 0x06
    3704:	00 97       	sbiw	r24, 0x00	; 0
    3706:	69 f7       	brne	.-38     	; 0x36e2 <DC_MOTOR+0x164>
    3708:	14 c0       	rjmp	.+40     	; 0x3732 <DC_MOTOR+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    370a:	6f 81       	ldd	r22, Y+7	; 0x07
    370c:	78 85       	ldd	r23, Y+8	; 0x08
    370e:	89 85       	ldd	r24, Y+9	; 0x09
    3710:	9a 85       	ldd	r25, Y+10	; 0x0a
    3712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3716:	dc 01       	movw	r26, r24
    3718:	cb 01       	movw	r24, r22
    371a:	9e 83       	std	Y+6, r25	; 0x06
    371c:	8d 83       	std	Y+5, r24	; 0x05
    371e:	8d 81       	ldd	r24, Y+5	; 0x05
    3720:	9e 81       	ldd	r25, Y+6	; 0x06
    3722:	9a 83       	std	Y+2, r25	; 0x02
    3724:	89 83       	std	Y+1, r24	; 0x01
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <DC_MOTOR+0x1ac>
    372e:	9a 83       	std	Y+2, r25	; 0x02
    3730:	89 83       	std	Y+1, r24	; 0x01
	 		_delay_ms(1000);
 }
    3732:	2e 96       	adiw	r28, 0x0e	; 14
    3734:	0f b6       	in	r0, 0x3f	; 63
    3736:	f8 94       	cli
    3738:	de bf       	out	0x3e, r29	; 62
    373a:	0f be       	out	0x3f, r0	; 63
    373c:	cd bf       	out	0x3d, r28	; 61
    373e:	cf 91       	pop	r28
    3740:	df 91       	pop	r29
    3742:	08 95       	ret

00003744 <__mulsi3>:
    3744:	62 9f       	mul	r22, r18
    3746:	d0 01       	movw	r26, r0
    3748:	73 9f       	mul	r23, r19
    374a:	f0 01       	movw	r30, r0
    374c:	82 9f       	mul	r24, r18
    374e:	e0 0d       	add	r30, r0
    3750:	f1 1d       	adc	r31, r1
    3752:	64 9f       	mul	r22, r20
    3754:	e0 0d       	add	r30, r0
    3756:	f1 1d       	adc	r31, r1
    3758:	92 9f       	mul	r25, r18
    375a:	f0 0d       	add	r31, r0
    375c:	83 9f       	mul	r24, r19
    375e:	f0 0d       	add	r31, r0
    3760:	74 9f       	mul	r23, r20
    3762:	f0 0d       	add	r31, r0
    3764:	65 9f       	mul	r22, r21
    3766:	f0 0d       	add	r31, r0
    3768:	99 27       	eor	r25, r25
    376a:	72 9f       	mul	r23, r18
    376c:	b0 0d       	add	r27, r0
    376e:	e1 1d       	adc	r30, r1
    3770:	f9 1f       	adc	r31, r25
    3772:	63 9f       	mul	r22, r19
    3774:	b0 0d       	add	r27, r0
    3776:	e1 1d       	adc	r30, r1
    3778:	f9 1f       	adc	r31, r25
    377a:	bd 01       	movw	r22, r26
    377c:	cf 01       	movw	r24, r30
    377e:	11 24       	eor	r1, r1
    3780:	08 95       	ret

00003782 <__udivmodhi4>:
    3782:	aa 1b       	sub	r26, r26
    3784:	bb 1b       	sub	r27, r27
    3786:	51 e1       	ldi	r21, 0x11	; 17
    3788:	07 c0       	rjmp	.+14     	; 0x3798 <__udivmodhi4_ep>

0000378a <__udivmodhi4_loop>:
    378a:	aa 1f       	adc	r26, r26
    378c:	bb 1f       	adc	r27, r27
    378e:	a6 17       	cp	r26, r22
    3790:	b7 07       	cpc	r27, r23
    3792:	10 f0       	brcs	.+4      	; 0x3798 <__udivmodhi4_ep>
    3794:	a6 1b       	sub	r26, r22
    3796:	b7 0b       	sbc	r27, r23

00003798 <__udivmodhi4_ep>:
    3798:	88 1f       	adc	r24, r24
    379a:	99 1f       	adc	r25, r25
    379c:	5a 95       	dec	r21
    379e:	a9 f7       	brne	.-22     	; 0x378a <__udivmodhi4_loop>
    37a0:	80 95       	com	r24
    37a2:	90 95       	com	r25
    37a4:	bc 01       	movw	r22, r24
    37a6:	cd 01       	movw	r24, r26
    37a8:	08 95       	ret

000037aa <__divmodsi4>:
    37aa:	97 fb       	bst	r25, 7
    37ac:	09 2e       	mov	r0, r25
    37ae:	05 26       	eor	r0, r21
    37b0:	0e d0       	rcall	.+28     	; 0x37ce <__divmodsi4_neg1>
    37b2:	57 fd       	sbrc	r21, 7
    37b4:	04 d0       	rcall	.+8      	; 0x37be <__divmodsi4_neg2>
    37b6:	14 d0       	rcall	.+40     	; 0x37e0 <__udivmodsi4>
    37b8:	0a d0       	rcall	.+20     	; 0x37ce <__divmodsi4_neg1>
    37ba:	00 1c       	adc	r0, r0
    37bc:	38 f4       	brcc	.+14     	; 0x37cc <__divmodsi4_exit>

000037be <__divmodsi4_neg2>:
    37be:	50 95       	com	r21
    37c0:	40 95       	com	r20
    37c2:	30 95       	com	r19
    37c4:	21 95       	neg	r18
    37c6:	3f 4f       	sbci	r19, 0xFF	; 255
    37c8:	4f 4f       	sbci	r20, 0xFF	; 255
    37ca:	5f 4f       	sbci	r21, 0xFF	; 255

000037cc <__divmodsi4_exit>:
    37cc:	08 95       	ret

000037ce <__divmodsi4_neg1>:
    37ce:	f6 f7       	brtc	.-4      	; 0x37cc <__divmodsi4_exit>
    37d0:	90 95       	com	r25
    37d2:	80 95       	com	r24
    37d4:	70 95       	com	r23
    37d6:	61 95       	neg	r22
    37d8:	7f 4f       	sbci	r23, 0xFF	; 255
    37da:	8f 4f       	sbci	r24, 0xFF	; 255
    37dc:	9f 4f       	sbci	r25, 0xFF	; 255
    37de:	08 95       	ret

000037e0 <__udivmodsi4>:
    37e0:	a1 e2       	ldi	r26, 0x21	; 33
    37e2:	1a 2e       	mov	r1, r26
    37e4:	aa 1b       	sub	r26, r26
    37e6:	bb 1b       	sub	r27, r27
    37e8:	fd 01       	movw	r30, r26
    37ea:	0d c0       	rjmp	.+26     	; 0x3806 <__udivmodsi4_ep>

000037ec <__udivmodsi4_loop>:
    37ec:	aa 1f       	adc	r26, r26
    37ee:	bb 1f       	adc	r27, r27
    37f0:	ee 1f       	adc	r30, r30
    37f2:	ff 1f       	adc	r31, r31
    37f4:	a2 17       	cp	r26, r18
    37f6:	b3 07       	cpc	r27, r19
    37f8:	e4 07       	cpc	r30, r20
    37fa:	f5 07       	cpc	r31, r21
    37fc:	20 f0       	brcs	.+8      	; 0x3806 <__udivmodsi4_ep>
    37fe:	a2 1b       	sub	r26, r18
    3800:	b3 0b       	sbc	r27, r19
    3802:	e4 0b       	sbc	r30, r20
    3804:	f5 0b       	sbc	r31, r21

00003806 <__udivmodsi4_ep>:
    3806:	66 1f       	adc	r22, r22
    3808:	77 1f       	adc	r23, r23
    380a:	88 1f       	adc	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	1a 94       	dec	r1
    3810:	69 f7       	brne	.-38     	; 0x37ec <__udivmodsi4_loop>
    3812:	60 95       	com	r22
    3814:	70 95       	com	r23
    3816:	80 95       	com	r24
    3818:	90 95       	com	r25
    381a:	9b 01       	movw	r18, r22
    381c:	ac 01       	movw	r20, r24
    381e:	bd 01       	movw	r22, r26
    3820:	cf 01       	movw	r24, r30
    3822:	08 95       	ret

00003824 <__prologue_saves__>:
    3824:	2f 92       	push	r2
    3826:	3f 92       	push	r3
    3828:	4f 92       	push	r4
    382a:	5f 92       	push	r5
    382c:	6f 92       	push	r6
    382e:	7f 92       	push	r7
    3830:	8f 92       	push	r8
    3832:	9f 92       	push	r9
    3834:	af 92       	push	r10
    3836:	bf 92       	push	r11
    3838:	cf 92       	push	r12
    383a:	df 92       	push	r13
    383c:	ef 92       	push	r14
    383e:	ff 92       	push	r15
    3840:	0f 93       	push	r16
    3842:	1f 93       	push	r17
    3844:	cf 93       	push	r28
    3846:	df 93       	push	r29
    3848:	cd b7       	in	r28, 0x3d	; 61
    384a:	de b7       	in	r29, 0x3e	; 62
    384c:	ca 1b       	sub	r28, r26
    384e:	db 0b       	sbc	r29, r27
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	09 94       	ijmp

0000385c <__epilogue_restores__>:
    385c:	2a 88       	ldd	r2, Y+18	; 0x12
    385e:	39 88       	ldd	r3, Y+17	; 0x11
    3860:	48 88       	ldd	r4, Y+16	; 0x10
    3862:	5f 84       	ldd	r5, Y+15	; 0x0f
    3864:	6e 84       	ldd	r6, Y+14	; 0x0e
    3866:	7d 84       	ldd	r7, Y+13	; 0x0d
    3868:	8c 84       	ldd	r8, Y+12	; 0x0c
    386a:	9b 84       	ldd	r9, Y+11	; 0x0b
    386c:	aa 84       	ldd	r10, Y+10	; 0x0a
    386e:	b9 84       	ldd	r11, Y+9	; 0x09
    3870:	c8 84       	ldd	r12, Y+8	; 0x08
    3872:	df 80       	ldd	r13, Y+7	; 0x07
    3874:	ee 80       	ldd	r14, Y+6	; 0x06
    3876:	fd 80       	ldd	r15, Y+5	; 0x05
    3878:	0c 81       	ldd	r16, Y+4	; 0x04
    387a:	1b 81       	ldd	r17, Y+3	; 0x03
    387c:	aa 81       	ldd	r26, Y+2	; 0x02
    387e:	b9 81       	ldd	r27, Y+1	; 0x01
    3880:	ce 0f       	add	r28, r30
    3882:	d1 1d       	adc	r29, r1
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	ed 01       	movw	r28, r26
    3890:	08 95       	ret

00003892 <_exit>:
    3892:	f8 94       	cli

00003894 <__stop_program>:
    3894:	ff cf       	rjmp	.-2      	; 0x3894 <__stop_program>
